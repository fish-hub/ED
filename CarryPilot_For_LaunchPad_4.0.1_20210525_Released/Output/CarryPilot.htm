<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Output\CarryPilot.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Output\CarryPilot.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu May 27 17:37:39 2021
<BR><P>
<H3>Maximum Stack Usage =        672 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TIMER0A_Handler &rArr; Ground_Sensor_Statemachine &rArr; VL53L1X_Get_Distance &rArr; VL53L1_GetRangingMeasurementData &rArr; VL53L1_get_device_results &rArr; VL53L1_get_measurement_results &rArr; VL53L1_ReadMulti &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[8]">Reset_Handler</a>
 <LI><a href="#[34]">__user_initial_stackheap</a>
 <LI><a href="#[9]">NmiSR</a>
 <LI><a href="#[a]">FaultISR</a>
 <LI><a href="#[b]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[27]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">SysCtlDelay</a><BR>
 <LI><a href="#[9]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">NmiSR</a><BR>
 <LI><a href="#[a]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">FaultISR</a><BR>
 <LI><a href="#[b]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">IntDefaultHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[c]">ADC0IntHandler</a> from wp_adc.o(i.ADC0IntHandler) referenced from wp_adc.o(i.ADC_Init)
 <LI><a href="#[a]">FaultISR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[b]">IntDefaultHandler</a> from startup_rvmdk.o(RESET) referenced 115 times from startup_rvmdk.o(RESET)
 <LI><a href="#[9]">NmiSR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[12]">PortFIntHandler</a> from ppm.o(i.PortFIntHandler) referenced from ppm.o(i.PPM_Init)
 <LI><a href="#[8]">Reset_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[15]">SycTickHandler</a> from time.o(i.SycTickHandler) referenced from time.o(i.initTime)
 <LI><a href="#[14]">TIMER0A_Handler</a> from time_cnt.o(i.TIMER0A_Handler) referenced from time_cnt.o(i.Time0A_init)
 <LI><a href="#[13]">TIMER1A_Handler</a> from license.o(i.TIMER1A_Handler) referenced from license.o(i.Schedule_init)
 <LI><a href="#[d]">UART0_IRQHandler</a> from usart.o(i.UART0_IRQHandler) referenced from usart.o(i.ConfigureUART0)
 <LI><a href="#[e]">UART1_IRQHandler</a> from usart.o(i.UART1_IRQHandler) referenced from usart.o(i.ConfigureUART1)
 <LI><a href="#[10]">UART2_IRQHandler</a> from usart.o(i.UART2_IRQHandler) referenced from usart.o(i.ConfigureUART6)
 <LI><a href="#[f]">UART3_IRQHandler</a> from usart.o(i.UART3_IRQHandler) referenced from usart.o(i.ConfigureUART3)
 <LI><a href="#[11]">UART7_IRQHandler</a> from usart.o(i.UART7_IRQHandler) referenced from usart.o(i.ConfigureUART7)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[8]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[17]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[19]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[29c]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[29d]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[29e]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[29f]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[2a0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[1f]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1a]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[2a1]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[2a2]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[2a3]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[2a4]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[2a5]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[2a6]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[2a7]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[2a8]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[2a9]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[2aa]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[2ab]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[2ac]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[2ad]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[2ae]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[2af]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[2b0]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[2b1]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[2b2]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[2b3]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[2b4]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[24]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[2b5]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[2b6]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[2b7]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[2b8]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[2b9]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[2ba]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[2bb]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[18]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[2bc]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[1c]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1e]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[2bd]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[20]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; QuadShow &rArr; ConfigureUART7 &rArr; VL53L1Init &rArr; VL53L1_StartMeasurement &rArr; VL53L1_init_and_start_range &rArr; VL53L1_WriteMulti &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2be]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[35]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[23]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[2bf]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[25]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[119]"></a>CPUcpsid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>

<P><STRONG><a name="[2c0]"></a>CPUprimask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[11b]"></a>CPUcpsie</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>

<P><STRONG><a name="[2c1]"></a>CPUwfi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[2c2]"></a>CPUbasepriSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[2c3]"></a>CPUbasepriGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[27]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMMassErase
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EEPROMSectorMaskSet
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EEPROMSectorMaskClear
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C0
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM
</UL>

<P><STRONG><a name="[34]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2b]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFIntHandler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>

<P><STRONG><a name="[28]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2c4]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>memcpy</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lookup_value
</UL>

<P><STRONG><a name="[29]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DT_Reset
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[2c5]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2c6]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2c7]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetRangingMeasurementData
</UL>

<P><STRONG><a name="[281]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_clear_display
</UL>

<P><STRONG><a name="[2e]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[2d]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LS_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Calibration_Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibrate_accel
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter_Horizontal_GPS
</UL>

<P><STRONG><a name="[2c8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[2c9]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[2ca]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[32]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[2cb]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2cc]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[2cd]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[2ce]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[2cf]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2d0]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2d1]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[1d]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[22]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[26]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[c]"></a>ADC0IntHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wp_adc.o(i.ADC0IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC0IntHandler &rArr; Test_Period &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceDataGet
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntClear
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Period
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wp_adc.o(i.ADC_Init)
</UL>
<P><STRONG><a name="[37]"></a>ADCIntClear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adc.o(i.ADCIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0IntHandler
</UL>

<P><STRONG><a name="[47]"></a>ADCIntEnable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adc.o(i.ADCIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[48]"></a>ADCIntEnableEx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adc.o(i.ADCIntEnableEx))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[39]"></a>ADCIntRegister</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, adc.o(i.ADCIntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ADCIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ADCIntNumberGet
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[4b]"></a>ADCProcessorTrigger</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, adc.o(i.ADCProcessorTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADCProcessorTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sample_Trigger
</UL>

<P><STRONG><a name="[44]"></a>ADCSequenceConfigure</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, adc.o(i.ADCSequenceConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADCSequenceConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[38]"></a>ADCSequenceDataGet</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, adc.o(i.ADCSequenceDataGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADCSequenceDataGet
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0IntHandler
</UL>

<P><STRONG><a name="[46]"></a>ADCSequenceEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adc.o(i.ADCSequenceEnable))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[45]"></a>ADCSequenceStepConfigure</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, adc.o(i.ADCSequenceStepConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADCSequenceStepConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[121]"></a>ADC_Button_Init</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, adc_button.o(i.ADC_Button_Init))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Init
</UL>

<P><STRONG><a name="[3e]"></a>ADC_Button_Read</STRONG> (Thumb, 330 bytes, Stack size 0 bytes, adc_button.o(i.ADC_Button_Read))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Button_Scan
</UL>

<P><STRONG><a name="[3d]"></a>ADC_Button_Scan</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, adc_button.o(i.ADC_Button_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADC_Button_Scan &rArr; Read_ADC_Button_State_All &rArr; Read_ADC_Button_State_One &rArr; millis &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADC_Button_State_All
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Button_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0A_Handler
</UL>

<P><STRONG><a name="[40]"></a>ADC_Init</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, wp_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ADC_Init &rArr; ADCIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceStepConfigure
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceEnable
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceConfigure
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntRegister
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntEnableEx
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntEnable
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntClear
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReady
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeADC
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_Init
</UL>

<P><STRONG><a name="[4a]"></a>ADC_Sample_Trigger</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wp_adc.o(i.ADC_Sample_Trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Sample_Trigger &rArr; ADCProcessorTrigger
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCProcessorTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0A_Handler
</UL>

<P><STRONG><a name="[4c]"></a>Accel_Calibartion</STRONG> (Thumb, 522 bytes, Stack size 40 bytes, calibration.o(i.Accel_Calibartion))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = Accel_Calibartion &rArr; Calibrate_accel &rArr; Calibrate_Update_Matrices
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashParameter_Three
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Set
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibrate_accel
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>Accel_Calibration_Check</STRONG> (Thumb, 1344 bytes, Stack size 24 bytes, calibration.o(i.Accel_Calibration_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Accel_Calibration_Check &rArr; Bling_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Set
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_RC_Calibartion
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Mag_Calibartion
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0A_Handler
</UL>

<P><STRONG><a name="[1bb]"></a>Alt_SINS_Init</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, sins.o(i.Alt_SINS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strapdown_INS_High_Kalman
</UL>

<P><STRONG><a name="[54]"></a>Angle_Control_Target</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, wp_ctrl.o(i.Angle_Control_Target))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Angle_Control_Target &rArr; PID_Control_Yaw &rArr; Test_Period &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_Yaw
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control
</UL>

<P><STRONG><a name="[57]"></a>Attitude_Control</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wp_ctrl.o(i.Attitude_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Attitude_Control &rArr; Gyro_Control &rArr; PID_Control_Div_LPF_For_Gyro &rArr; Control_Device_LPF
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Control
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Control_Target
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Total_Control
</UL>

<P><STRONG><a name="[59]"></a>Auto_Flight_Ctrl</STRONG> (Thumb, 328 bytes, Stack size 8 bytes, developer_mode.o(i.Auto_Flight_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Auto_Flight_Ctrl &rArr; NCQ_SDK_Run &rArr; move_with_z_target &rArr; OpticalFlow_Control_Pure &rArr; OpticalFlow_Vel_Control &rArr; accel_to_lean_angles &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCQ_SDK_Run
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_Alt_Hold_Control
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Top_APrilTag_Control_Pliot
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Track_Control_Pliot
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Front_AprilTag_Control_Pliot
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_Block_Control_Pliot
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Leading_Control
</UL>

<P><STRONG><a name="[61]"></a>Bling_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bling.o(i.Bling_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Bling_Init &rArr; Quad_Start_Bling &rArr; Bling_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quad_Start_Bling
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[64]"></a>Bling_Process</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, bling.o(i.Bling_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bling_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Working
</UL>

<P><STRONG><a name="[50]"></a>Bling_Set</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, bling.o(i.Bling_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Bling_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quad_Start_Bling
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Calibration_Check
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_Calibration_Check
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Calibration_Check
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_Calibration_Check
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Calibration_Check
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Calibartion_LS
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Calibartion
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pilot_Status_Tick
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Output
</UL>

<P><STRONG><a name="[66]"></a>Bling_Working</STRONG> (Thumb, 358 bytes, Stack size 8 bytes, bling.o(i.Bling_Working))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bling_Working &rArr; GPIO_SetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0A_Handler
</UL>

<P><STRONG><a name="[68]"></a>Butterworth_Parameter_Init</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, filter.o(i.Butterworth_Parameter_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Butterworth_Parameter_Init &rArr; Set_Cutoff_Frequency &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Cutoff_Frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[6d]"></a>Calibrate_Find_Delta</STRONG> (Thumb, 350 bytes, Stack size 16 bytes, calibration.o(i.Calibrate_Find_Delta))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Calibrate_Find_Delta
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibrate_accel
</UL>

<P><STRONG><a name="[6b]"></a>Calibrate_Reset_Matrices</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, calibration.o(i.Calibrate_Reset_Matrices))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Calibrate_Reset_Matrices
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibrate_accel
</UL>

<P><STRONG><a name="[6c]"></a>Calibrate_Update_Matrices</STRONG> (Thumb, 246 bytes, Stack size 44 bytes, calibration.o(i.Calibrate_Update_Matrices))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Calibrate_Update_Matrices
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibrate_accel
</UL>

<P><STRONG><a name="[4d]"></a>Calibrate_accel</STRONG> (Thumb, 660 bytes, Stack size 264 bytes, calibration.o(i.Calibrate_accel))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = Calibrate_accel &rArr; Calibrate_Update_Matrices
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibrate_Update_Matrices
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibrate_Reset_Matrices
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibrate_Find_Delta
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Calibartion
</UL>

<P><STRONG><a name="[6e]"></a>CarryPilot_Control</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, wp_ctrl.o(i.CarryPilot_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CarryPilot_Control &rArr; Total_Control &rArr; Main_Leading_Control &rArr; Auto_Flight_Ctrl &rArr; NCQ_SDK_Run &rArr; move_with_z_target &rArr; OpticalFlow_Control_Pure &rArr; OpticalFlow_Vel_Control &rArr; accel_to_lean_angles &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature_Ctrl
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Total_Control
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controler_Mode_Select
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0A_Handler
</UL>

<P><STRONG><a name="[18b]"></a>Check_Calibration_Flag</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, calibration.o(i.Check_Calibration_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control
</UL>

<P><STRONG><a name="[130]"></a>Check_Plane_Sampling_Okay</STRONG> (Thumb, 452 bytes, Stack size 8 bytes, calibration.o(i.Check_Plane_Sampling_Okay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Check_Plane_Sampling_Okay
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Calibartion_LS
</UL>

<P><STRONG><a name="[5b]"></a>Color_Block_Control_Pliot</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, opticalflow_control.o(i.Color_Block_Control_Pliot))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Color_Block_Control_Pliot &rArr; OpticalFlow_Control_Pure &rArr; OpticalFlow_Vel_Control &rArr; accel_to_lean_angles &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_SDK_Err_LPF
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Vel_Control
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control_Pure
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Flight_Ctrl
</UL>

<P><STRONG><a name="[1a3]"></a>Compass_Fault_Check</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, compass.o(i.Compass_Fault_Check))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Update
</UL>

<P><STRONG><a name="[7f]"></a>Compass_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, compass.o(i.Compass_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Compass_Init &rArr; QMC5883L_Init &rArr; QMC5883L_Initialize &rArr; QMC5883L_Write_Reg &rArr; Single_WriteI2C0 &rArr; i2c0Write &rArr; i2c0WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Cutoff_Frequency
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GPIO_Config
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883L_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[83]"></a>Compass_Read_Data</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, compass.o(i.Compass_Read_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Compass_Read_Data &rArr; Single_ReadI2C0 &rArr; i2c0Read
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Period
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Single_ReadI2C0
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Update
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init
</UL>

<P><STRONG><a name="[85]"></a>Config_Init_Uart</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, opticalflow_lc306.o(i.Config_Init_Uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Config_Init_Uart &rArr; delay_ms &rArr; Delay_Ms &rArr; delay &rArr; delayMicroseconds &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharsAvail
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGet
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorConfig_UartSend
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART6
</UL>

<P><STRONG><a name="[8a]"></a>ConfigureUART0</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, usart.o(i.ConfigureUART0))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ConfigureUART0 &rArr; GPIOPinTypeUART &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntRegister
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFIFODisable
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTClockSourceSet
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_Init
</UL>

<P><STRONG><a name="[92]"></a>ConfigureUART1</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, usart.o(i.ConfigureUART1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ConfigureUART1 &rArr; GPIOPinTypeUART &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntRegister
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFIFODisable
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTClockSourceSet
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_Init
</UL>

<P><STRONG><a name="[93]"></a>ConfigureUART3</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, usart.o(i.ConfigureUART3))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ConfigureUART3 &rArr; GPIOPinTypeUART &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntRegister
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFIFODisable
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[96]"></a>ConfigureUART6</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, usart.o(i.ConfigureUART6))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ConfigureUART6 &rArr; OpticalFlow_Init &rArr; Config_Init_Uart &rArr; delay_ms &rArr; Delay_Ms &rArr; delay &rArr; delayMicroseconds &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntRegister
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFIFODisable
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Init_Uart
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[98]"></a>ConfigureUART7</STRONG> (Thumb, 478 bytes, Stack size 8 bytes, usart.o(i.ConfigureUART7))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ConfigureUART7 &rArr; VL53L1Init &rArr; VL53L1_StartMeasurement &rArr; VL53L1_init_and_start_range &rArr; VL53L1_WriteMulti &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntRegister
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFIFODisable
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashParameterOne
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuff_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[9c]"></a>Control_Device_LPF</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, pid.o(i.Control_Device_LPF))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Control_Device_LPF
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_SDK_Err_LPF
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_Div_LPF_For_Gyro
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_Div_LPF
</UL>

<P><STRONG><a name="[71]"></a>Control_Output</STRONG> (Thumb, 1538 bytes, Stack size 56 bytes, wp_ctrl.o(i.Control_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Control_Output &rArr; PWM_Output &rArr; PWMPulseWidthSet
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Output
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Set
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Throttle_Control_Reset
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Off_Reset
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_SINS_Reset
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Ctrl_Reset
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Value_Limit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Throttle_Angle_Compensate
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;landon_earth_check
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryPilot_Control
</UL>

<P><STRONG><a name="[6f]"></a>Controler_Mode_Select</STRONG> (Thumb, 442 bytes, Stack size 8 bytes, wp_ctrl.o(i.Controler_Mode_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Controler_Mode_Select &rArr; Take_Off_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Off_Reset
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_SINS_Reset
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Ctrl_Reset
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCQ_SDK_Reset
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;land_reset
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thr_Push_Over_Deadband
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryPilot_Control
</UL>

<P><STRONG><a name="[248]"></a>DelayUs</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, vl53l1x_i2c.o(i.DelayUs))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Wait_Ack
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Send_Byte
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Read_Byte
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_NAck
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Ack
</UL>

<P><STRONG><a name="[81]"></a>Delay_Ms</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, time.o(i.Delay_Ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Delay_Ms &rArr; delay &rArr; delayMicroseconds &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_Fast
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Logo1
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compass_Init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_I2C_Init
</UL>

<P><STRONG><a name="[ad]"></a>Double_ReadI2C</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, myiic.o(i.Double_ReadI2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Double_ReadI2C &rArr; i2cRead
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Calibration
</UL>

<P><STRONG><a name="[af]"></a>Draw_Logo1</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, oled.o(i.Draw_Logo1))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Draw_Logo1 &rArr; Delay_Ms &rArr; delay &rArr; delayMicroseconds &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WrDat
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Pos
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[b3]"></a>EEPROMInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, eeprom.o(i.EEPROMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EEPROMInit &rArr; SysCtlPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReset
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EEPROMWaitForDone
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Init
</UL>

<P><STRONG><a name="[b6]"></a>EEPROMMassErase</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, eeprom.o(i.EEPROMMassErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EEPROMMassErase &rArr; SysCtlPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReset
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EEPROMWaitForDone
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EEPROMSectorMaskClear
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_Factory_Setting
</UL>

<P><STRONG><a name="[b8]"></a>EEPROMProgram</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, eeprom.o(i.EEPROMProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EEPROMProgram &rArr; _EEPROMSectorMaskSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EEPROMSectorMaskSet
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EEPROMSectorMaskClear
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashParameter_Two
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashParameter_Three
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashParameter
</UL>

<P><STRONG><a name="[17f]"></a>EEPROMRead</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, eeprom.o(i.EEPROMRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EEPROMRead
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashParameterTwo
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashParameterThree
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashParameterOne
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashParameterALL
</UL>

<P><STRONG><a name="[ba]"></a>EEPROM_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wp_flash.o(i.EEPROM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EEPROM_Init &rArr; EEPROMInit &rArr; SysCtlPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMInit
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Start_Init
</UL>

<P><STRONG><a name="[bb]"></a>ESC_Calibration</STRONG> (Thumb, 320 bytes, Stack size 72 bytes, calibration.o(i.ESC_Calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ESC_Calibration &rArr; PWM_Output &rArr; PWMPulseWidthSet
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Output
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_HardWave_Init
</UL>

<P><STRONG><a name="[bd]"></a>ESC_Calibration_Check</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, calibration.o(i.ESC_Calibration_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ESC_Calibration_Check &rArr; WriteFlashParameter &rArr; EEPROMProgram &rArr; _EEPROMSectorMaskSet
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashParameter
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0A_Handler
</UL>

<P><STRONG><a name="[bf]"></a>ESC_HardWave_Init</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, license.o(i.ESC_HardWave_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ESC_HardWave_Init &rArr; ESC_Calibration &rArr; PWM_Output &rArr; PWMPulseWidthSet
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashParameter
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_Calibration
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_Fast
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P8x16Str
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_6_8_number
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear_L
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P6x8Str
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_Init
</UL>

<P><STRONG><a name="[c7]"></a>Euler_Angle_Init</STRONG> (Thumb, 954 bytes, Stack size 72 bytes, sensor.o(i.Euler_Angle_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Euler_Angle_Init &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Read_Data
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compass_Read_Data
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Init
</UL>

<P><STRONG><a name="[d0]"></a>Euler_Angle_Init_Again</STRONG> (Thumb, 2684 bytes, Stack size 104 bytes, sensor.o(i.Euler_Angle_Init_Again))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Euler_Angle_Init_Again &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Calibration_Check
</UL>

<P><STRONG><a name="[1bf]"></a>FPUEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fpu.o(i.FPUEnable))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Start_Init
</UL>

<P><STRONG><a name="[1c0]"></a>FPULazyStackingEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fpu.o(i.FPULazyStackingEnable))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Start_Init
</UL>

<P><STRONG><a name="[d3]"></a>FastSqrt</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, wp_math.o(i.FastSqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FastSqrt &rArr; FastSqrtI
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastSqrtI
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openmv_Data_Receive_Anl_2
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openmv_Data_Receive_Anl_1
</UL>

<P><STRONG><a name="[d4]"></a>FastSqrtI</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, wp_math.o(i.FastSqrtI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FastSqrtI
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastSqrt
</UL>

<P><STRONG><a name="[1a1]"></a>FastTan</STRONG> (Thumb, 356 bytes, Stack size 0 bytes, wp_math.o(i.FastTan))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Parameter_Sort
</UL>

<P><STRONG><a name="[5c]"></a>Flight_Alt_Hold_Control</STRONG> (Thumb, 1214 bytes, Stack size 24 bytes, control_althold.o(i.Flight_Alt_Hold_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Flight_Alt_Hold_Control &rArr; PID_Control_Div_LPF &rArr; Control_Device_LPF
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_Div_LPF
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Systime
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Flight_Ctrl
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Leading_Control
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;land_nogps_run
</UL>

<P><STRONG><a name="[148]"></a>Float2Byte</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, nclink.o(i.Float2Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Float2Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_Userdata
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_CalRawdata2
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_CalRawdata1
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_CalParadata3
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_CalParadata2
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_CalParadata1
</UL>

<P><STRONG><a name="[5f]"></a>Front_AprilTag_Control_Pliot</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, opticalflow_control.o(i.Front_AprilTag_Control_Pliot))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Front_AprilTag_Control_Pliot &rArr; OpticalFlow_Control_Pure &rArr; OpticalFlow_Vel_Control &rArr; accel_to_lean_angles &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_SDK_Err_LPF
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Vel_Control
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control_Pure
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Flight_Ctrl
</UL>

<P><STRONG><a name="[da]"></a>GPIODirModeSet</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2CSCL
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2C
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeADC
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Init
</UL>

<P><STRONG><a name="[166]"></a>GPIOIntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFIntHandler
</UL>

<P><STRONG><a name="[164]"></a>GPIOIntEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Init
</UL>

<P><STRONG><a name="[d8]"></a>GPIOIntRegister</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gpio.o(i.GPIOIntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIOIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GPIOIntNumberGet
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Init
</UL>

<P><STRONG><a name="[163]"></a>GPIOIntTypeSet</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntTypeSet))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Init
</UL>

<P><STRONG><a name="[db]"></a>GPIOPadConfigSet</STRONG> (Thumb, 342 bytes, Stack size 20 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2CSCL
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2C
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeADC
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_I2C_Init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SDA_OUT
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SDA_IN
</UL>

<P><STRONG><a name="[8b]"></a>GPIOPinConfigure</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gpio.o(i.GPIOPinConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOPinConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C0
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART7
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART1
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART0
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART6
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART3
</UL>

<P><STRONG><a name="[17a]"></a>GPIOPinRead</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinRead))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Calibration_Trigger
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Calibration_Check
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Button_State_One
</UL>

<P><STRONG><a name="[43]"></a>GPIOPinTypeADC</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIOPinTypeADC &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[dc]"></a>GPIOPinTypeGPIOInput</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SDA_IN
</UL>

<P><STRONG><a name="[62]"></a>GPIOPinTypeGPIOOutput</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_Fast
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_I2C_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Simulation_PWM_Init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SDA_OUT
</UL>

<P><STRONG><a name="[dd]"></a>GPIOPinTypeI2C</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeI2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIOPinTypeI2C &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C0
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C
</UL>

<P><STRONG><a name="[de]"></a>GPIOPinTypeI2CSCL</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeI2CSCL))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIOPinTypeI2CSCL &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C0
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C
</UL>

<P><STRONG><a name="[df]"></a>GPIOPinTypePWM</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypePWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIOPinTypePWM &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM
</UL>

<P><STRONG><a name="[8c]"></a>GPIOPinTypeUART</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIOPinTypeUART &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART7
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART1
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART0
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART6
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART3
</UL>

<P><STRONG><a name="[65]"></a>GPIOPinWrite</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Working
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Process
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_Fast
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WrDat
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WrCmd
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_I2C_Init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Simulation_PWM_Output
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Simulation_PWM_Init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Wait_Ack
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Stop
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Start
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Send_Byte
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Read_Byte
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_NAck
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Ack
</UL>

<P><STRONG><a name="[67]"></a>GPIO_SetBits</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bling.o(i.GPIO_SetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Working
</UL>

<P><STRONG><a name="[e0]"></a>GPSData_Sort</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, sins.o(i.GPSData_Sort))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = GPSData_Sort &rArr; location_diff &rArr; longitude_scale &rArr; __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_diff
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter_Horizontal
</UL>

<P><STRONG><a name="[e2]"></a>GPS_Data_Prase</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, gps.o(i.GPS_Data_Prase))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GPS_Data_Prase &rArr; Set_GPS_Home &rArr; get_declination &rArr; get_lookup_value &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPS_Home
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_PVT_Parse
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0A_Handler
</UL>

<P><STRONG><a name="[e3]"></a>GPS_PVT_Parse</STRONG> (Thumb, 1640 bytes, Stack size 24 bytes, gps.o(i.GPS_PVT_Parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPS_PVT_Parse &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Period
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Data_Prase
</UL>

<P><STRONG><a name="[e6]"></a>Get_Baro_Offset</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, sensor.o(i.Get_Baro_Offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Get_Baro_Offset &rArr; __hardfp_powf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Update
</UL>

<P><STRONG><a name="[e8]"></a>Get_Battery_Voltage</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, wp_adc.o(i.Get_Battery_Voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Get_Battery_Voltage &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>Get_Status_Feedback</STRONG> (Thumb, 1444 bytes, Stack size 40 bytes, sensor.o(i.Get_Status_Feedback))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = Get_Status_Feedback &rArr; Sensor_Update &rArr; Gyro_Calibration_Check &rArr; Euler_Angle_Init_Again &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strapdown_INS_High_Kalman
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SINS_Prepare
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuComputeRotationMatrix
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Update
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Observation_Angle_Calculate
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick_AHRS_Update_IMU
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0A_Handler
</UL>

<P><STRONG><a name="[d5]"></a>Get_Systime</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, schedule.o(i.Get_Systime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Get_Systime &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOF_Statemachine
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ncq_control_althold
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_Alt_Hold_Control
</UL>

<P><STRONG><a name="[189]"></a>Get_Thr_Rate</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, rc.o(i.Get_Thr_Rate))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control
</UL>

<P><STRONG><a name="[f4]"></a>Ground_Sensor_Statemachine</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tfmini.o(i.Ground_Sensor_Statemachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = Ground_Sensor_Statemachine &rArr; VL53L1X_Get_Distance &rArr; VL53L1_GetRangingMeasurementData &rArr; VL53L1_get_device_results &rArr; VL53L1_get_measurement_results &rArr; VL53L1_ReadMulti &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US_100_Statemachine
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1X_Get_Distance
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOF_Statemachine
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFmini_Statemachine
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0A_Handler
</UL>

<P><STRONG><a name="[f9]"></a>Gyro_Calibration_Check</STRONG> (Thumb, 594 bytes, Stack size 32 bytes, calibration.o(i.Gyro_Calibration_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Gyro_Calibration_Check &rArr; Euler_Angle_Init_Again &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashParameter_Three
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature_State_Check
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init_Again
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Update
</UL>

<P><STRONG><a name="[58]"></a>Gyro_Control</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, wp_ctrl.o(i.Gyro_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Gyro_Control &rArr; PID_Control_Div_LPF_For_Gyro &rArr; Control_Device_LPF
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_Div_LPF_For_Gyro
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_Div_LPF
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yaw_Fault_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control
</UL>

<P><STRONG><a name="[fd]"></a>HardWave_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, system.o(i.HardWave_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = HardWave_Init &rArr; ConfigureUART7 &rArr; VL53L1Init &rArr; VL53L1_StartMeasurement &rArr; VL53L1_init_and_start_range &rArr; VL53L1_WriteMulti &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Butterworth_Parameter_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Calibration_Trigger
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Other_Parameter_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_Calibration_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Paramter_Init_With_Flash
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART7
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_Quad_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature_Ctrl_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART6
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART3
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compass_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPL06_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10a]"></a>Horizontal_Calibration_Check</STRONG> (Thumb, 632 bytes, Stack size 40 bytes, calibration.o(i.Horizontal_Calibration_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Horizontal_Calibration_Check &rArr; WriteFlashParameter &rArr; EEPROMProgram &rArr; _EEPROMSectorMaskSet
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashParameter
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Set
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0A_Handler
</UL>

<P><STRONG><a name="[101]"></a>Horizontal_Calibration_Init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, calibration.o(i.Horizontal_Calibration_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Horizontal_Calibration_Init &rArr; ReadFlashParameterOne &rArr; EEPROMRead
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashParameterOne
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[26e]"></a>I2CMasterBusy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterBusy))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteData
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0WriteData
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0Read
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cReadData
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>

<P><STRONG><a name="[26d]"></a>I2CMasterControl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterControl))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteData
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0WriteData
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0Read
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cReadData
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>

<P><STRONG><a name="[26f]"></a>I2CMasterDataGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterDataGet))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0Read
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cReadData
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>

<P><STRONG><a name="[26c]"></a>I2CMasterDataPut</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterDataPut))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteData
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0WriteData
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0Read
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cReadData
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>

<P><STRONG><a name="[10e]"></a>I2CMasterEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterEnable))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterInitExpClk
</UL>

<P><STRONG><a name="[10d]"></a>I2CMasterInitExpClk</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, i2c.o(i.I2CMasterInitExpClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2CMasterInitExpClk
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C0
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C
</UL>

<P><STRONG><a name="[26b]"></a>I2CMasterSlaveAddrSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterSlaveAddrSet))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteData
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0WriteData
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0Read
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cReadData
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>

<P><STRONG><a name="[80]"></a>I2C_GPIO_Config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, soft_i2c.o(i.I2C_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_GPIO_Config &rArr; Init_I2C0 &rArr; GPIOPinTypeI2CSCL &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C0
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compass_Init
</UL>

<P><STRONG><a name="[110]"></a>IMU_Calibration</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, mpu6050.o(i.IMU_Calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IMU_Calibration &rArr; delay_ms &rArr; Delay_Ms &rArr; delay &rArr; delayMicroseconds &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashParameterOne
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Double_ReadI2C
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
</UL>

<P><STRONG><a name="[112]"></a>Init_I2C</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, myiic.o(i.Init_I2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Init_I2C &rArr; GPIOPinTypeI2CSCL &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2CSCL
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2C
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterInitExpClk
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_Init
</UL>

<P><STRONG><a name="[10f]"></a>Init_I2C0</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, myiic.o(i.Init_I2C0))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Init_I2C0 &rArr; GPIOPinTypeI2CSCL &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReset
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2CSCL
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2C
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterInitExpClk
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GPIO_Config
</UL>

<P><STRONG><a name="[c2]"></a>Init_PWM</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, wp_pwm.o(i.Init_PWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Init_PWM &rArr; PWM_Output &rArr; PWMPulseWidthSet
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPWMClockSet
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputState
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenPeriodSet
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenEnable
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenConfigure
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_HardWave_Init
</UL>

<P><STRONG><a name="[3c]"></a>IntEnable</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, interrupt.o(i.IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntRegister
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntRegister
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntRegister
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntRegister
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schedule_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0A_init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[118]"></a>IntMasterDisable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_init
</UL>

<P><STRONG><a name="[11a]"></a>IntMasterEnable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Start_Init
</UL>

<P><STRONG><a name="[1c2]"></a>IntPriorityGroupingSet</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, interrupt.o(i.IntPriorityGroupingSet))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Start_Init
</UL>

<P><STRONG><a name="[49]"></a>IntPrioritySet</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, interrupt.o(i.IntPrioritySet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntPrioritySet
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART7
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART1
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART0
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART6
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART3
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schedule_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0A_init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[3b]"></a>IntRegister</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, interrupt.o(i.IntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IntRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntRegister
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntRegister
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntRegister
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntRegister
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntRegister
</UL>

<P><STRONG><a name="[11c]"></a>KalmanFilter</STRONG> (Thumb, 1658 bytes, Stack size 96 bytes, sins.o(i.KalmanFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = KalmanFilter &rArr; safe_sqrt &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strapdown_INS_High_Kalman
</UL>

<P><STRONG><a name="[11d]"></a>KalmanFilter_Horizontal</STRONG> (Thumb, 1162 bytes, Stack size 16 bytes, sins.o(i.KalmanFilter_Horizontal))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = KalmanFilter_Horizontal &rArr; KalmanFilter_Horizontal_GPS &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Period
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter_Horizontal_GPS
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSData_Sort
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0A_Handler
</UL>

<P><STRONG><a name="[11f]"></a>KalmanFilter_Horizontal_GPS</STRONG> (Thumb, 2678 bytes, Stack size 168 bytes, sins.o(i.KalmanFilter_Horizontal_GPS))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = KalmanFilter_Horizontal_GPS &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter_Horizontal
</UL>

<P><STRONG><a name="[ff]"></a>Key_Init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, key.o(i.Key_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Key_Init &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Button_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[122]"></a>Key_Scan</STRONG> (Thumb, 576 bytes, Stack size 16 bytes, key.o(i.Key_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Key_Scan &rArr; key_delay &rArr; delay_us &rArr; delayMicroseconds &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>LCD_CLS</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oled.o(i.LCD_CLS))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_CLS &rArr; LCD_WrDat
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WrDat
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Logo1
</UL>

<P><STRONG><a name="[125]"></a>LCD_P6x8Char</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, oled.o(i.LCD_P6x8Char))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_P6x8Char &rArr; LCD_Set_Pos &rArr; LCD_WrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WrDat
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_6_8_number
</UL>

<P><STRONG><a name="[c5]"></a>LCD_P6x8Str</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, oled.o(i.LCD_P6x8Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_P6x8Str &rArr; LCD_Set_Pos &rArr; LCD_WrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WrDat
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_6_8_number
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_6_8_string
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_HardWave_Init
</UL>

<P><STRONG><a name="[c4]"></a>LCD_P8x16Str</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, oled.o(i.LCD_P8x16Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_P8x16Str &rArr; LCD_Set_Pos &rArr; LCD_WrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WrDat
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_HardWave_Init
</UL>

<P><STRONG><a name="[b0]"></a>LCD_Set_Pos</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, oled.o(i.LCD_Set_Pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_Set_Pos &rArr; LCD_WrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P8x16Str
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P6x8Char
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Logo1
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear_L
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P6x8Str
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_oled
</UL>

<P><STRONG><a name="[124]"></a>LCD_WrCmd</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, oled.o(i.LCD_WrCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_WrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Pos
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear_L
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_command
</UL>

<P><STRONG><a name="[b1]"></a>LCD_WrDat</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, oled.o(i.LCD_WrDat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_WrDat
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P8x16Str
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P6x8Char
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Logo1
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear_L
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P6x8Str
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_oled
</UL>

<P><STRONG><a name="[c3]"></a>LCD_clear_L</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, oled.o(i.LCD_clear_L))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_clear_L &rArr; LCD_Set_Pos &rArr; LCD_WrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WrDat
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WrCmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_HardWave_Init
</UL>

<P><STRONG><a name="[126]"></a>LPButterworth</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, filter.o(i.LPButterworth))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPButterworth
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SINS_Prepare
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Data_LPF_Filter
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Optflow_Prase
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Update
</UL>

<P><STRONG><a name="[12f]"></a>LS_Accumulate</STRONG> (Thumb, 252 bytes, Stack size 0 bytes, calibrationroutines.o(i.LS_Accumulate))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Calibartion_LS
</UL>

<P><STRONG><a name="[128]"></a>LS_Calculate</STRONG> (Thumb, 1404 bytes, Stack size 248 bytes, calibrationroutines.o(i.LS_Calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = LS_Calculate &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Calibartion_LS
</UL>

<P><STRONG><a name="[129]"></a>LS_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, calibrationroutines.o(i.LS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LS_Init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Calibration_Check
</UL>

<P><STRONG><a name="[104]"></a>MPU6050_Init</STRONG> (Thumb, 388 bytes, Stack size 8 bytes, mpu6050.o(i.MPU6050_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MPU6050_Init &rArr; IMU_Calibration &rArr; delay_ms &rArr; Delay_Ms &rArr; delay &rArr; delayMicroseconds &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Cutoff_Frequency
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Calibration
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Single_ReadI2C
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[c8]"></a>MPU6050_Read_Data</STRONG> (Thumb, 336 bytes, Stack size 64 bytes, mpu6050.o(i.MPU6050_Read_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MPU6050_Read_Data &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cReadData
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Update
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init
</UL>

<P><STRONG><a name="[ed]"></a>Madgwick_AHRS_Update_IMU</STRONG> (Thumb, 2504 bytes, Stack size 256 bytes, sensor.o(i.Madgwick_AHRS_Update_IMU))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Madgwick_AHRS_Update_IMU &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Period
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sq
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_Feedback
</UL>

<P><STRONG><a name="[12e]"></a>Mag_Calibartion_LS</STRONG> (Thumb, 1122 bytes, Stack size 48 bytes, calibration.o(i.Mag_Calibartion_LS))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = Mag_Calibartion_LS &rArr; LS_Calculate &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashParameter_Three
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LS_Calculate
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LS_Accumulate
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Set
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Plane_Sampling_Okay
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[131]"></a>Mag_Calibration_Check</STRONG> (Thumb, 782 bytes, Stack size 24 bytes, calibration.o(i.Mag_Calibration_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Mag_Calibration_Check &rArr; Bling_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LS_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Set
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_RC_Calibartion
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Accel_Calibartion
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0A_Handler
</UL>

<P><STRONG><a name="[133]"></a>Main_Leading_Control</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, wp_ctrl.o(i.Main_Leading_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Main_Leading_Control &rArr; Auto_Flight_Ctrl &rArr; NCQ_SDK_Run &rArr; move_with_z_target &rArr; OpticalFlow_Control_Pure &rArr; OpticalFlow_Vel_Control &rArr; accel_to_lean_angles &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control_Pure
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Flight_Ctrl
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;land_run
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_Alt_Hold_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Total_Control
</UL>

<P><STRONG><a name="[135]"></a>NCLink_Data_Prase_Prepare</STRONG> (Thumb, 314 bytes, Stack size 8 bytes, nclink.o(i.NCLink_Data_Prase_Prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = NCLink_Data_Prase_Prepare &rArr; NCLink_Data_Prase_Process &rArr; Other_Parameter_Default &rArr; WriteFlashParameter &rArr; EEPROMProgram &rArr; _EEPROMSectorMaskSet
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Data_Prase_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[136]"></a>NCLink_Data_Prase_Process</STRONG> (Thumb, 4454 bytes, Stack size 40 bytes, nclink.o(i.NCLink_Data_Prase_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = NCLink_Data_Prase_Process &rArr; Other_Parameter_Default &rArr; WriteFlashParameter &rArr; EEPROMProgram &rArr; _EEPROMSectorMaskSet
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashParameter
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Other_Parameter_Default
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_Factory_Setting
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pilot_Status_Tick
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Data_Prase_Prepare
</UL>

<P><STRONG><a name="[13a]"></a>NCLink_SEND_StateMachine</STRONG> (Thumb, 884 bytes, Stack size 48 bytes, nclink.o(i.NCLink_SEND_StateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = NCLink_SEND_StateMachine &rArr; NCLink_Send_Check_Status_Parameter &rArr; NCLink_Send_PID &rArr; Serial_Data_Send &rArr; USART1_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_Userdata
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_Status
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_Senser
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_RCData
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_Obs_UOP
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_Obs_NE
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_GPSData
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_Fusion_U
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_Fusion_NE
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_Check_Status_Parameter
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_CalRawdata2
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_CalRawdata1
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0A_Handler
</UL>

<P><STRONG><a name="[147]"></a>NCLink_Send_CalParadata1</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, nclink.o(i.NCLink_Send_CalParadata1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = NCLink_Send_CalParadata1 &rArr; Serial_Data_Send &rArr; USART1_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Data_Send
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Float2Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_Check_Status_Parameter
</UL>

<P><STRONG><a name="[14a]"></a>NCLink_Send_CalParadata2</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, nclink.o(i.NCLink_Send_CalParadata2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = NCLink_Send_CalParadata2 &rArr; Serial_Data_Send &rArr; USART1_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Data_Send
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Float2Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_Check_Status_Parameter
</UL>

<P><STRONG><a name="[14b]"></a>NCLink_Send_CalParadata3</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, nclink.o(i.NCLink_Send_CalParadata3))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NCLink_Send_CalParadata3 &rArr; Serial_Data_Send &rArr; USART1_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Data_Send
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Float2Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_Check_Status_Parameter
</UL>

<P><STRONG><a name="[145]"></a>NCLink_Send_CalRawdata1</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, nclink.o(i.NCLink_Send_CalRawdata1))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = NCLink_Send_CalRawdata1 &rArr; Serial_Data_Send &rArr; USART1_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Data_Send
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Float2Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_SEND_StateMachine
</UL>

<P><STRONG><a name="[146]"></a>NCLink_Send_CalRawdata2</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, nclink.o(i.NCLink_Send_CalRawdata2))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NCLink_Send_CalRawdata2 &rArr; Serial_Data_Send &rArr; USART1_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Data_Send
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Float2Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_SEND_StateMachine
</UL>

<P><STRONG><a name="[13b]"></a>NCLink_Send_Check_Status_Parameter</STRONG> (Thumb, 1212 bytes, Stack size 24 bytes, nclink.o(i.NCLink_Send_Check_Status_Parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = NCLink_Send_Check_Status_Parameter &rArr; NCLink_Send_PID &rArr; Serial_Data_Send &rArr; USART1_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_Parameter
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_PID
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_CalParadata3
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_CalParadata2
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_CalParadata1
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_SEND_StateMachine
</UL>

<P><STRONG><a name="[143]"></a>NCLink_Send_Fusion_NE</STRONG> (Thumb, 576 bytes, Stack size 48 bytes, nclink.o(i.NCLink_Send_Fusion_NE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = NCLink_Send_Fusion_NE &rArr; Serial_Data_Send &rArr; USART1_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Data_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_SEND_StateMachine
</UL>

<P><STRONG><a name="[142]"></a>NCLink_Send_Fusion_U</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, nclink.o(i.NCLink_Send_Fusion_U))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = NCLink_Send_Fusion_U &rArr; Serial_Data_Send &rArr; USART1_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Data_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_SEND_StateMachine
</UL>

<P><STRONG><a name="[13f]"></a>NCLink_Send_GPSData</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, nclink.o(i.NCLink_Send_GPSData))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = NCLink_Send_GPSData &rArr; Serial_Data_Send &rArr; USART1_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Data_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_SEND_StateMachine
</UL>

<P><STRONG><a name="[140]"></a>NCLink_Send_Obs_NE</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, nclink.o(i.NCLink_Send_Obs_NE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = NCLink_Send_Obs_NE &rArr; Serial_Data_Send &rArr; USART1_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Data_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_SEND_StateMachine
</UL>

<P><STRONG><a name="[141]"></a>NCLink_Send_Obs_UOP</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, nclink.o(i.NCLink_Send_Obs_UOP))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = NCLink_Send_Obs_UOP &rArr; Serial_Data_Send &rArr; USART1_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Data_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_SEND_StateMachine
</UL>

<P><STRONG><a name="[14d]"></a>NCLink_Send_PID</STRONG> (Thumb, 590 bytes, Stack size 64 bytes, nclink.o(i.NCLink_Send_PID))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = NCLink_Send_PID &rArr; Serial_Data_Send &rArr; USART1_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Data_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_Check_Status_Parameter
</UL>

<P><STRONG><a name="[14e]"></a>NCLink_Send_Parameter</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, nclink.o(i.NCLink_Send_Parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = NCLink_Send_Parameter &rArr; Serial_Data_Send &rArr; USART1_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Data_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_Check_Status_Parameter
</UL>

<P><STRONG><a name="[13e]"></a>NCLink_Send_RCData</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, nclink.o(i.NCLink_Send_RCData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NCLink_Send_RCData &rArr; Serial_Data_Send &rArr; USART1_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Data_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_SEND_StateMachine
</UL>

<P><STRONG><a name="[13d]"></a>NCLink_Send_Senser</STRONG> (Thumb, 410 bytes, Stack size 40 bytes, nclink.o(i.NCLink_Send_Senser))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = NCLink_Send_Senser &rArr; Serial_Data_Send &rArr; USART1_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Data_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_SEND_StateMachine
</UL>

<P><STRONG><a name="[13c]"></a>NCLink_Send_Status</STRONG> (Thumb, 640 bytes, Stack size 64 bytes, nclink.o(i.NCLink_Send_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = NCLink_Send_Status &rArr; Serial_Data_Send &rArr; USART1_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Data_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_SEND_StateMachine
</UL>

<P><STRONG><a name="[144]"></a>NCLink_Send_Userdata</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, nclink.o(i.NCLink_Send_Userdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = NCLink_Send_Userdata &rArr; Serial_Data_Send &rArr; USART1_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Data_Send
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Float2Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_SEND_StateMachine
</UL>

<P><STRONG><a name="[a9]"></a>NCQ_SDK_Reset</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, namelesscotrun_sdk.o(i.NCQ_SDK_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controler_Mode_Select
</UL>

<P><STRONG><a name="[5a]"></a>NCQ_SDK_Run</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, namelesscotrun_sdk.o(i.NCQ_SDK_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = NCQ_SDK_Run &rArr; move_with_z_target &rArr; OpticalFlow_Control_Pure &rArr; OpticalFlow_Vel_Control &rArr; accel_to_lean_angles &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_with_z_target
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_with_xy_target
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ncq_control_althold
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Flight_Ctrl
</UL>

<P><STRONG><a name="[152]"></a>OLED_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, oled.o(i.OLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_Init &rArr; Draw_Logo1 &rArr; Delay_Ms &rArr; delay &rArr; delayMicroseconds &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_begin
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Logo1
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_Init
</UL>

<P><STRONG><a name="[c0]"></a>OLED_Init_Fast</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, oled.o(i.OLED_Init_Fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OLED_Init_Fast &rArr; Delay_Ms &rArr; delay &rArr; delayMicroseconds &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_begin
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_HardWave_Init
</UL>

<P><STRONG><a name="[15b]"></a>OPT_Is_Fix</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, opticalflow_control.o(i.OPT_Is_Fix))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Vel_Control
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Pos_Control
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control_Pure
</UL>

<P><STRONG><a name="[ec]"></a>Observation_Angle_Calculate</STRONG> (Thumb, 482 bytes, Stack size 72 bytes, sensor.o(i.Observation_Angle_Calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Observation_Angle_Calculate &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_Feedback
</UL>

<P><STRONG><a name="[1ba]"></a>Observation_Tradeoff</STRONG> (Thumb, 1518 bytes, Stack size 0 bytes, sins.o(i.Observation_Tradeoff))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strapdown_INS_High_Kalman
</UL>

<P><STRONG><a name="[154]"></a>Openmv_Data_Receive_Anl_1</STRONG> (Thumb, 774 bytes, Stack size 24 bytes, namelesscotrun_sdk.o(i.Openmv_Data_Receive_Anl_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Openmv_Data_Receive_Anl_1 &rArr; Sensor_Parameter_Sort
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastSqrt
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Parameter_Sort
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_Data_Receive_Prepare
</UL>

<P><STRONG><a name="[156]"></a>Openmv_Data_Receive_Anl_2</STRONG> (Thumb, 682 bytes, Stack size 96 bytes, namelesscotrun_sdk.o(i.Openmv_Data_Receive_Anl_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Openmv_Data_Receive_Anl_2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastSqrt
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_Data_Receive_Prepare
</UL>

<P><STRONG><a name="[157]"></a>Optflow_Prase</STRONG> (Thumb, 2180 bytes, Stack size 8 bytes, namelesscorun_opticalflow.o(i.Optflow_Prase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Optflow_Prase &rArr; OpticalFlow_Rotate_Complementary_Filter &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPButterworth
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Rotate_Complementary_Filter
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Optflow_Statemachine
</UL>

<P><STRONG><a name="[159]"></a>Optflow_Statemachine</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, namelesscorun_opticalflow.o(i.Optflow_Statemachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Optflow_Statemachine &rArr; OpticalFlow_CF &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_CF
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Optflow_Prase
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0A_Handler
</UL>

<P><STRONG><a name="[15a]"></a>OpticalFlow_CF</STRONG> (Thumb, 770 bytes, Stack size 56 bytes, namelesscorun_opticalflow.o(i.OpticalFlow_CF))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OpticalFlow_CF &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Period
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Optflow_Statemachine
</UL>

<P><STRONG><a name="[60]"></a>OpticalFlow_Control</STRONG> (Thumb, 418 bytes, Stack size 8 bytes, opticalflow_control.o(i.OpticalFlow_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OpticalFlow_Control &rArr; OpticalFlow_Vel_Control &rArr; accel_to_lean_angles &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_LPF_Reset
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pythagorous2
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Systime
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Vel_Control
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Pos_Control
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Ctrl_Reset
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Expect_Speed_Mapping
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPT_Is_Fix
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCQ_SDK_Run
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Flight_Ctrl
</UL>

<P><STRONG><a name="[7d]"></a>OpticalFlow_Control_Pure</STRONG> (Thumb, 460 bytes, Stack size 8 bytes, opticalflow_control.o(i.OpticalFlow_Control_Pure))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OpticalFlow_Control_Pure &rArr; OpticalFlow_Vel_Control &rArr; accel_to_lean_angles &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Vel_Control
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Pos_Control
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Expect_Speed_Mapping
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPT_Is_Fix
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_with_z_target
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_with_xy_target
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Leading_Control
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Top_APrilTag_Control_Pliot
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Track_Control_Pliot
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Front_AprilTag_Control_Pliot
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_Block_Control_Pliot
</UL>

<P><STRONG><a name="[a2]"></a>OpticalFlow_Ctrl_Reset</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, opticalflow_control.o(i.OpticalFlow_Ctrl_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controler_Mode_Select
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Output
</UL>

<P><STRONG><a name="[15e]"></a>OpticalFlow_Expect_Speed_Mapping</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, opticalflow_control.o(i.OpticalFlow_Expect_Speed_Mapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OpticalFlow_Expect_Speed_Mapping &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control_Pure
</UL>

<P><STRONG><a name="[97]"></a>OpticalFlow_Init</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, namelesscorun_opticalflow.o(i.OpticalFlow_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OpticalFlow_Init &rArr; Config_Init_Uart &rArr; delay_ms &rArr; Delay_Ms &rArr; delay &rArr; delayMicroseconds &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Cutoff_Frequency
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashParameterOne
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Init_Uart
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART6
</UL>

<P><STRONG><a name="[15d]"></a>OpticalFlow_Pos_Control</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, opticalflow_control.o(i.OpticalFlow_Pos_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OpticalFlow_Pos_Control &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPT_Is_Fix
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_with_xy_target
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control_Pure
</UL>

<P><STRONG><a name="[158]"></a>OpticalFlow_Rotate_Complementary_Filter</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, namelesscorun_opticalflow.o(i.OpticalFlow_Rotate_Complementary_Filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OpticalFlow_Rotate_Complementary_Filter &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Optflow_Prase
</UL>

<P><STRONG><a name="[a1]"></a>OpticalFlow_SINS_Reset</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, opticalflow_control.o(i.OpticalFlow_SINS_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controler_Mode_Select
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Output
</UL>

<P><STRONG><a name="[7e]"></a>OpticalFlow_Vel_Control</STRONG> (Thumb, 516 bytes, Stack size 16 bytes, opticalflow_control.o(i.OpticalFlow_Vel_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OpticalFlow_Vel_Control &rArr; accel_to_lean_angles &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_to_lean_angles
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPT_Is_Fix
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_with_xy_target
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control_Pure
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Top_APrilTag_Control_Pliot
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Track_Control_Pliot
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Front_AprilTag_Control_Pliot
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_Block_Control_Pliot
</UL>

<P><STRONG><a name="[138]"></a>Other_Parameter_Default</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, calibration.o(i.Other_Parameter_Default))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Other_Parameter_Default &rArr; WriteFlashParameter &rArr; EEPROMProgram &rArr; _EEPROMSectorMaskSet
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashParameter
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Data_Prase_Process
</UL>

<P><STRONG><a name="[103]"></a>Other_Parameter_Init</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, calibration.o(i.Other_Parameter_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Other_Parameter_Init &rArr; ReadFlashParameterOne &rArr; EEPROMRead
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashParameterOne
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[55]"></a>PID_Control</STRONG> (Thumb, 462 bytes, Stack size 16 bytes, pid.o(i.PID_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PID_Control &rArr; Test_Period &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Period
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Control_Target
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;land_althold
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ncq_control_althold
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_Alt_Hold_Control
</UL>

<P><STRONG><a name="[d6]"></a>PID_Control_Div_LPF</STRONG> (Thumb, 530 bytes, Stack size 24 bytes, pid.o(i.PID_Control_Div_LPF))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PID_Control_Div_LPF &rArr; Control_Device_LPF
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Device_LPF
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Period
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature_Ctrl
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Control
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_Alt_Hold_Control
</UL>

<P><STRONG><a name="[fb]"></a>PID_Control_Div_LPF_For_Gyro</STRONG> (Thumb, 618 bytes, Stack size 24 bytes, pid.o(i.PID_Control_Div_LPF_For_Gyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PID_Control_Div_LPF_For_Gyro &rArr; Control_Device_LPF
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Device_LPF
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Period
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Control
</UL>

<P><STRONG><a name="[7c]"></a>PID_Control_SDK_Err_LPF</STRONG> (Thumb, 584 bytes, Stack size 24 bytes, pid.o(i.PID_Control_SDK_Err_LPF))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PID_Control_SDK_Err_LPF &rArr; Control_Device_LPF
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Device_LPF
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Period
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Top_APrilTag_Control_Pliot
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Track_Control_Pliot
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Front_AprilTag_Control_Pliot
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_Block_Control_Pliot
</UL>

<P><STRONG><a name="[56]"></a>PID_Control_Yaw</STRONG> (Thumb, 530 bytes, Stack size 16 bytes, pid.o(i.PID_Control_Yaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PID_Control_Yaw &rArr; Test_Period &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Period
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Control_Target
</UL>

<P><STRONG><a name="[1c7]"></a>PID_Init</STRONG> (Thumb, 366 bytes, Stack size 0 bytes, pid.o(i.PID_Init))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Total_PID_Init
</UL>

<P><STRONG><a name="[1c4]"></a>PID_Integrate_Reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pid.o(i.PID_Integrate_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Throttle_Control_Reset
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Off_Reset
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yaw_Fault_Check
</UL>

<P><STRONG><a name="[15f]"></a>PID_LPF_Reset</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, pid.o(i.PID_LPF_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Throttle_Control_Reset
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control
</UL>

<P><STRONG><a name="[102]"></a>PID_Paramter_Init_With_Flash</STRONG> (Thumb, 884 bytes, Stack size 16 bytes, pid.o(i.PID_Paramter_Init_With_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = PID_Paramter_Init_With_Flash &rArr; Total_PID_Init &rArr; Set_Cutoff_Frequency &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashParameterThree
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Total_PID_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[c1]"></a>PPM_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ppm.o(i.PPM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PPM_Init &rArr; GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntTypeSet
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntRegister
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntEnable
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_HardWave_Init
</UL>

<P><STRONG><a name="[114]"></a>PWMGenConfigure</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, pwm.o(i.PWMGenConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWMGenConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM
</UL>

<P><STRONG><a name="[116]"></a>PWMGenEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwm.o(i.PWMGenEnable))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM
</UL>

<P><STRONG><a name="[115]"></a>PWMGenPeriodSet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pwm.o(i.PWMGenPeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM
</UL>

<P><STRONG><a name="[117]"></a>PWMOutputState</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pwm.o(i.PWMOutputState))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM
</UL>

<P><STRONG><a name="[165]"></a>PWMPulseWidthSet</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, pwm.o(i.PWMPulseWidthSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PWMPulseWidthSet
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Output
</UL>

<P><STRONG><a name="[a8]"></a>PWM_Output</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, wp_pwm.o(i.PWM_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PWM_Output &rArr; PWMPulseWidthSet
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPulseWidthSet
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_Calibration
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Output
</UL>

<P><STRONG><a name="[4f]"></a>Parameter_Init</STRONG> (Thumb, 1288 bytes, Stack size 24 bytes, calibration.o(i.Parameter_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Parameter_Init &rArr; ReadFlashParameterThree &rArr; EEPROMRead
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashParameterThree
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashParameterOne
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_Calibration_Check
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Calibartion
</UL>

<P><STRONG><a name="[137]"></a>Pilot_Status_Tick</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nclink.o(i.Pilot_Status_Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Pilot_Status_Tick &rArr; Bling_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Data_Prase_Process
</UL>

<P><STRONG><a name="[12]"></a>PortFIntHandler</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, ppm.o(i.PortFIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PortFIntHandler &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntClear
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ppm.o(i.PPM_Init)
</UL>
<P><STRONG><a name="[82]"></a>QMC5883L_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, qmc5883.o(i.QMC5883L_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = QMC5883L_Init &rArr; QMC5883L_Initialize &rArr; QMC5883L_Write_Reg &rArr; Single_WriteI2C0 &rArr; i2c0Write &rArr; i2c0WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883L_Reset
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883L_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compass_Init
</UL>

<P><STRONG><a name="[168]"></a>QMC5883L_Initialize</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, qmc5883.o(i.QMC5883L_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = QMC5883L_Initialize &rArr; QMC5883L_Write_Reg &rArr; Single_WriteI2C0 &rArr; i2c0Write &rArr; i2c0WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883L_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883L_Init
</UL>

<P><STRONG><a name="[167]"></a>QMC5883L_Reset</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, qmc5883.o(i.QMC5883L_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = QMC5883L_Reset &rArr; QMC5883L_Write_Reg &rArr; Single_WriteI2C0 &rArr; i2c0Write &rArr; i2c0WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883L_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883L_Init
</UL>

<P><STRONG><a name="[169]"></a>QMC5883L_Write_Reg</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, qmc5883.o(i.QMC5883L_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = QMC5883L_Write_Reg &rArr; Single_WriteI2C0 &rArr; i2c0Write &rArr; i2c0WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Single_WriteI2C0
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883L_Reset
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883L_Initialize
</UL>

<P><STRONG><a name="[16b]"></a>QuadShow</STRONG> (Thumb, 11166 bytes, Stack size 64 bytes, key.o(i.QuadShow))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = QuadShow &rArr; ConfigureUART7 &rArr; VL53L1Init &rArr; VL53L1_StartMeasurement &rArr; VL53L1_init_and_start_range &rArr; VL53L1_WriteMulti &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashParameter
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Set
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_6_8_number
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_fill_circle
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_line
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_circle
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_display
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_clear_display
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ins_wave
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_gps_wave
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_6_8_string
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_6_8_number
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DT_Send_Check
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear_L
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P6x8Str
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CLS
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART7
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[63]"></a>Quad_Start_Bling</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, bling.o(i.Quad_Start_Bling))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Quad_Start_Bling &rArr; Bling_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Init
</UL>

<P><STRONG><a name="[176]"></a>Quaternion_Init</STRONG> (Thumb, 1494 bytes, Stack size 72 bytes, sensor.o(i.Quaternion_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Quaternion_Init &rArr; Euler_Angle_Init &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_Quad_Init
</UL>

<P><STRONG><a name="[177]"></a>RC_Calibration_Check</STRONG> (Thumb, 446 bytes, Stack size 16 bytes, calibration.o(i.RC_Calibration_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RC_Calibration_Check &rArr; WriteFlashParameter_Two &rArr; EEPROMProgram &rArr; _EEPROMSectorMaskSet
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashParameter_Two
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Calibration_RESET
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17b]"></a>RC_Calibration_Init</STRONG> (Thumb, 438 bytes, Stack size 80 bytes, calibration.o(i.RC_Calibration_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RC_Calibration_Init &rArr; ReadFlashParameterTwo &rArr; EEPROMRead
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashParameterTwo
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Calibration_Trigger
</UL>

<P><STRONG><a name="[178]"></a>RC_Calibration_RESET</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, calibration.o(i.RC_Calibration_RESET))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Calibration_Trigger
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Calibration_Check
</UL>

<P><STRONG><a name="[100]"></a>RC_Calibration_Trigger</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, calibration.o(i.RC_Calibration_Trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RC_Calibration_Trigger &rArr; RC_Calibration_Init &rArr; ReadFlashParameterTwo &rArr; EEPROMRead
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Calibration_RESET
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Calibration_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[17d]"></a>RC_Data_LPF_Filter</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, rc.o(i.RC_Data_LPF_Filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RC_Data_LPF_Filter &rArr; LPButterworth
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPButterworth
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control
</UL>

<P><STRONG><a name="[186]"></a>RC_Read_Switch</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, rc.o(i.RC_Read_Switch))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control
</UL>

<P><STRONG><a name="[187]"></a>RC_Scale_Set</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rc.o(i.RC_Scale_Set))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control
</UL>

<P><STRONG><a name="[17e]"></a>ReadFlashParameterALL</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wp_flash.o(i.ReadFlashParameterALL))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadFlashParameterALL &rArr; EEPROMRead
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMRead
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashParameter_Two
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashParameter_Three
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashParameter
</UL>

<P><STRONG><a name="[99]"></a>ReadFlashParameterOne</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wp_flash.o(i.ReadFlashParameterOne))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadFlashParameterOne &rArr; EEPROMRead
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMRead
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Other_Parameter_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_Calibration_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Calibration
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART7
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_Init
</UL>

<P><STRONG><a name="[162]"></a>ReadFlashParameterThree</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, wp_flash.o(i.ReadFlashParameterThree))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ReadFlashParameterThree &rArr; EEPROMRead
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMRead
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Paramter_Init_With_Flash
</UL>

<P><STRONG><a name="[17c]"></a>ReadFlashParameterTwo</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wp_flash.o(i.ReadFlashParameterTwo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadFlashParameterTwo &rArr; EEPROMRead
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMRead
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Calibration_Init
</UL>

<P><STRONG><a name="[3f]"></a>Read_ADC_Button_State_All</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, adc_button.o(i.Read_ADC_Button_State_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Read_ADC_Button_State_All &rArr; Read_ADC_Button_State_One &rArr; millis &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADC_Button_State_One
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Button_Scan
</UL>

<P><STRONG><a name="[180]"></a>Read_ADC_Button_State_One</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, adc_button.o(i.Read_ADC_Button_State_One))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Read_ADC_Button_State_One &rArr; millis &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADC_Button_State_All
</UL>

<P><STRONG><a name="[182]"></a>Read_Button_State_All</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, key.o(i.Read_Button_State_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Read_Button_State_All &rArr; Read_Button_State_One &rArr; millis &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Button_State_One
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0A_Handler
</UL>

<P><STRONG><a name="[183]"></a>Read_Button_State_One</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, key.o(i.Read_Button_State_One))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Read_Button_State_One &rArr; millis &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Button_State_All
</UL>

<P><STRONG><a name="[184]"></a>Remote_Control</STRONG> (Thumb, 2380 bytes, Stack size 32 bytes, rc.o(i.Remote_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Remote_Control &rArr; RC_Data_LPF_Filter &rArr; LPButterworth
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Set
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_RC_Calibartion
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Mag_Calibartion
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Accel_Calibartion
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Calibration_Flag
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_int16_t
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Data_Remap
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Scale_Set
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Read_Switch
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Data_LPF_Filter
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Thr_Rate
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0A_Handler
</UL>

<P><STRONG><a name="[185]"></a>Remote_Data_Remap</STRONG> (Thumb, 340 bytes, Stack size 0 bytes, rc.o(i.Remote_Data_Remap))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control
</UL>

<P><STRONG><a name="[132]"></a>Reset_Accel_Calibartion</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, calibration.o(i.Reset_Accel_Calibartion))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Calibration_Check
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control
</UL>

<P><STRONG><a name="[52]"></a>Reset_Mag_Calibartion</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, calibration.o(i.Reset_Mag_Calibartion))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Calibration_Check
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control
</UL>

<P><STRONG><a name="[53]"></a>Reset_RC_Calibartion</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, calibration.o(i.Reset_RC_Calibartion))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Calibration_Check
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Calibration_Check
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control
</UL>

<P><STRONG><a name="[139]"></a>Resume_Factory_Setting</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, license.o(i.Resume_Factory_Setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Resume_Factory_Setting &rArr; EEPROMMassErase &rArr; SysCtlPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMMassErase
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Data_Prase_Process
</UL>

<P><STRONG><a name="[1ca]"></a>RingBuf_Write</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ringbuf.o(i.RingBuf_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RingBuf_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[9a]"></a>RingBuff_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ringbuf.o(i.RingBuff_Init))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART7
</UL>

<P><STRONG><a name="[18c]"></a>SDK_DT_Reset</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, namelesscotrun_sdk.o(i.SDK_DT_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDK_DT_Reset &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_Init
</UL>

<P><STRONG><a name="[16e]"></a>SDK_DT_Send_Check</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, namelesscotrun_sdk.o(i.SDK_DT_Send_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDK_DT_Send_Check &rArr; USART3_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Send
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_Init
</UL>

<P><STRONG><a name="[18f]"></a>SDK_Data_Prase_1</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, namelesscotrun_sdk.o(i.SDK_Data_Prase_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SDK_Data_Prase_1 &rArr; SDK_Data_Receive_Prepare &rArr; Openmv_Data_Receive_Anl_2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_Data_Receive_Prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0A_Handler
</UL>

<P><STRONG><a name="[191]"></a>SDK_Data_Prase_2</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, namelesscotrun_sdk.o(i.SDK_Data_Prase_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SDK_Data_Prase_2 &rArr; SDK_Data_Receive_Prepare &rArr; Openmv_Data_Receive_Anl_2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_Data_Receive_Prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0A_Handler
</UL>

<P><STRONG><a name="[190]"></a>SDK_Data_Receive_Prepare</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, namelesscotrun_sdk.o(i.SDK_Data_Receive_Prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SDK_Data_Receive_Prepare &rArr; Openmv_Data_Receive_Anl_2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openmv_Data_Receive_Anl_2
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openmv_Data_Receive_Anl_1
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_Data_Prase_2
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_Data_Prase_1
</UL>

<P><STRONG><a name="[107]"></a>SDK_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, namelesscotrun_sdk.o(i.SDK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDK_Init &rArr; SDK_DT_Send_Check &rArr; USART3_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashParameterOne
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DT_Send_Check
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DT_Reset
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[f1]"></a>SINS_Prepare</STRONG> (Thumb, 490 bytes, Stack size 40 bytes, sins.o(i.SINS_Prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SINS_Prepare &rArr; LPButterworth
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPButterworth
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_From_BodyFrame2EarthFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_Feedback
</UL>

<P><STRONG><a name="[105]"></a>SPL06_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spl06.o(i.SPL06_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPL06_Init &rArr; spl0601_rateset &rArr; spl0601_write &rArr; Single_WriteI2C &rArr; i2cWrite &rArr; i2cWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_start_continuous
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_rateset
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[196]"></a>SPL06_Read_Data</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, spl06.o(i.SPL06_Read_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPL06_Read_Data &rArr; user_spl0601_get &rArr; spl0601_get_temperature &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_spl0601_get
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Update
</UL>

<P><STRONG><a name="[198]"></a>Save_Or_Reset_PID_Parameter</STRONG> (Thumb, 1718 bytes, Stack size 8 bytes, pid.o(i.Save_Or_Reset_PID_Parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Save_Or_Reset_PID_Parameter &rArr; Save_PID_Parameter &rArr; WriteFlashParameter_Three &rArr; EEPROMProgram &rArr; _EEPROMSectorMaskSet
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Total_PID_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_PID_Parameter
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[199]"></a>Save_PID_Parameter</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, pid.o(i.Save_PID_Parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Save_PID_Parameter &rArr; WriteFlashParameter_Three &rArr; EEPROMProgram &rArr; _EEPROMSectorMaskSet
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashParameter_Three
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Or_Reset_PID_Parameter
</UL>

<P><STRONG><a name="[19a]"></a>Schedule_init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, license.o(i.Schedule_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Schedule_init &rArr; TimerIntRegister &rArr; _TimerIntNumberGet
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntRegister
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntEnable
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_init
</UL>

<P><STRONG><a name="[5e]"></a>Self_Track_Control_Pliot</STRONG> (Thumb, 422 bytes, Stack size 8 bytes, opticalflow_control.o(i.Self_Track_Control_Pliot))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Self_Track_Control_Pliot &rArr; OpticalFlow_Control_Pure &rArr; OpticalFlow_Vel_Control &rArr; accel_to_lean_angles &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_SDK_Err_LPF
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Vel_Control
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control_Pure
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Flight_Ctrl
</UL>

<P><STRONG><a name="[155]"></a>Sensor_Parameter_Sort</STRONG> (Thumb, 392 bytes, Stack size 48 bytes, namelesscotrun_sdk.o(i.Sensor_Parameter_Sort))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Sensor_Parameter_Sort
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_atan
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastTan
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openmv_Data_Receive_Anl_1
</UL>

<P><STRONG><a name="[eb]"></a>Sensor_Update</STRONG> (Thumb, 808 bytes, Stack size 8 bytes, sensor.o(i.Sensor_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Sensor_Update &rArr; Gyro_Calibration_Check &rArr; Euler_Angle_Init_Again &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPButterworth
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Calibration_Check
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Read_Data
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPL06_Read_Data
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pythagorous3
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compass_Read_Data
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compass_Fault_Check
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Baro_Offset
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_Feedback
</UL>

<P><STRONG><a name="[149]"></a>Serial_Data_Send</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nclink.o(i.Serial_Data_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Serial_Data_Send &rArr; USART1_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_Userdata
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_Status
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_Senser
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_RCData
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_Parameter
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_PID
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_Obs_UOP
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_Obs_NE
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_GPSData
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_Fusion_U
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_Fusion_NE
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_CalRawdata2
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_CalRawdata1
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_CalParadata3
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_CalParadata2
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_CalParadata1
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_Check
</UL>

<P><STRONG><a name="[69]"></a>Set_Cutoff_Frequency</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, filter.o(i.Set_Cutoff_Frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Set_Cutoff_Frequency &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Butterworth_Parameter_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Total_PID_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compass_Init
</UL>

<P><STRONG><a name="[e4]"></a>Set_GPS_Home</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, sins.o(i.Set_GPS_Home))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Set_GPS_Home &rArr; get_declination &rArr; get_lookup_value &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_declination
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strapdown_INS_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Data_Prase
</UL>

<P><STRONG><a name="[1b5]"></a>Simulation_PWM_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, temperature_ctrl.o(i.Simulation_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Simulation_PWM_Init &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_Init
</UL>

<P><STRONG><a name="[1b6]"></a>Simulation_PWM_Output</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, temperature_ctrl.o(i.Simulation_PWM_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Simulation_PWM_Output
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1A_Handler
</UL>

<P><STRONG><a name="[12a]"></a>Single_ReadI2C</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, myiic.o(i.Single_ReadI2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Single_ReadI2C &rArr; i2cRead
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_read
</UL>

<P><STRONG><a name="[84]"></a>Single_ReadI2C0</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, soft_i2c.o(i.Single_ReadI2C0))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Single_ReadI2C0 &rArr; i2c0Read
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0Read
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compass_Read_Data
</UL>

<P><STRONG><a name="[1b8]"></a>Single_WriteI2C</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, myiic.o(i.Single_WriteI2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Single_WriteI2C &rArr; i2cWrite &rArr; i2cWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_write
</UL>

<P><STRONG><a name="[16a]"></a>Single_WriteI2C0</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, soft_i2c.o(i.Single_WriteI2C0))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Single_WriteI2C0 &rArr; i2c0Write &rArr; i2c0WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0Write
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883L_Write_Reg
</UL>

<P><STRONG><a name="[f2]"></a>Strapdown_INS_High_Kalman</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, sins.o(i.Strapdown_INS_High_Kalman))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Strapdown_INS_High_Kalman &rArr; KalmanFilter &rArr; safe_sqrt &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Period
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Observation_Tradeoff
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alt_SINS_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_Feedback
</UL>

<P><STRONG><a name="[1b3]"></a>Strapdown_INS_Reset</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, sins.o(i.Strapdown_INS_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Strapdown_INS_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPS_Home
</UL>

<P><STRONG><a name="[94]"></a>SysCtlClockGet</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, sysctl.o(i.SysCtlClockGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C0
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART7
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART6
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART3
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schedule_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0A_init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTime
</UL>

<P><STRONG><a name="[1bc]"></a>SysCtlClockSet</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, sysctl.o(i.SysCtlClockSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysCtlClockSet
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Start_Init
</UL>

<P><STRONG><a name="[113]"></a>SysCtlPWMClockSet</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPWMClockSet))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM
</UL>

<P><STRONG><a name="[41]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_Fast
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C0
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART7
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART1
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART0
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART6
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART3
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schedule_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0A_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_I2C_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Simulation_PWM_Init
</UL>

<P><STRONG><a name="[42]"></a>SysCtlPeripheralReady</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralReady))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[b5]"></a>SysCtlPeripheralReset</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, sysctl.o(i.SysCtlPeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SysCtlPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMMassErase
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMInit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C0
</UL>

<P><STRONG><a name="[274]"></a>SysTickEnable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, systick.o(i.SysTickEnable))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTime
</UL>

<P><STRONG><a name="[273]"></a>SysTickIntEnable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, systick.o(i.SysTickIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTime
</UL>

<P><STRONG><a name="[1bd]"></a>SysTickIntRegister</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, systick.o(i.SysTickIntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SysTickIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTime
</UL>

<P><STRONG><a name="[275]"></a>SysTickPeriodGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systick.o(i.SysTickPeriodGet))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTime
</UL>

<P><STRONG><a name="[272]"></a>SysTickPeriodSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systick.o(i.SysTickPeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTime
</UL>

<P><STRONG><a name="[279]"></a>SysTickValueGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, systick.o(i.SysTickValueGet))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>

<P><STRONG><a name="[1be]"></a>System_Start_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, license.o(i.System_Start_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = System_Start_Init &rArr; initTime &rArr; SysTickIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPULazyStackingEnable
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPUEnable
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPriorityGroupingSet
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTime
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_Init
</UL>

<P><STRONG><a name="[f6]"></a>TFmini_Statemachine</STRONG> (Thumb, 480 bytes, Stack size 8 bytes, tfmini.o(i.TFmini_Statemachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TFmini_Statemachine
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ground_Sensor_Statemachine
</UL>

<P><STRONG><a name="[14]"></a>TIMER0A_Handler</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, time_cnt.o(i.TIMER0A_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = TIMER0A_Handler &rArr; Ground_Sensor_Statemachine &rArr; VL53L1X_Get_Distance &rArr; VL53L1_GetRangingMeasurementData &rArr; VL53L1_get_device_results &rArr; VL53L1_get_measurement_results &rArr; VL53L1_ReadMulti &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntClear
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bling_Working
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Calibration_Check
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_Calibration_Check
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_Calibration_Check
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Calibration_Check
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Button_State_All
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Period
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Data_Prase
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_Data_Prase_2
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_Data_Prase_1
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Optflow_Statemachine
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_SEND_StateMachine
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ground_Sensor_Statemachine
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_Feedback
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryPilot_Control
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Sample_Trigger
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Button_Scan
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter_Horizontal
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> time_cnt.o(i.Time0A_init)
</UL>
<P><STRONG><a name="[13]"></a>TIMER1A_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, license.o(i.TIMER1A_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TIMER1A_Handler &rArr; Temperature_Ctrl &rArr; PID_Control_Div_LPF &rArr; Control_Device_LPF
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntClear
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Simulation_PWM_Output
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature_Ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> license.o(i.Schedule_init)
</UL>
<P><STRONG><a name="[f7]"></a>TOF_Statemachine</STRONG> (Thumb, 476 bytes, Stack size 16 bytes, topsensor.o(i.TOF_Statemachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TOF_Statemachine &rArr; Get_Systime &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Systime
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ground_Sensor_Statemachine
</UL>

<P><STRONG><a name="[a0]"></a>Take_Off_Reset</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, pid.o(i.Take_Off_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Take_Off_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Integrate_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controler_Mode_Select
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Output
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;land_nogps_run
</UL>

<P><STRONG><a name="[72]"></a>Temperature_Ctrl</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, temperature_ctrl.o(i.Temperature_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Temperature_Ctrl &rArr; PID_Control_Div_LPF &rArr; Control_Device_LPF
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_Div_LPF
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryPilot_Control
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1A_Handler
</UL>

<P><STRONG><a name="[108]"></a>Temperature_Ctrl_Init</STRONG> (Thumb, 296 bytes, Stack size 0 bytes, temperature_ctrl.o(i.Temperature_Ctrl_Init))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[fa]"></a>Temperature_State_Check</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, temperature_ctrl.o(i.Temperature_State_Check))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Calibration_Check
</UL>

<P><STRONG><a name="[36]"></a>Test_Period</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, schedule.o(i.Test_Period))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Test_Period &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_Yaw
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_SDK_Err_LPF
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_Div_LPF_For_Gyro
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_Div_LPF
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_PVT_Parse
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0A_Handler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strapdown_INS_High_Kalman
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter_Horizontal
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0IntHandler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1X_Get_Distance
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_with_z_target
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_CF
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compass_Read_Data
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick_AHRS_Update_IMU
</UL>

<P><STRONG><a name="[aa]"></a>Thr_Push_Over_Deadband</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, control_althold.o(i.Thr_Push_Over_Deadband))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controler_Mode_Select
</UL>

<P><STRONG><a name="[276]"></a>Thr_Scale_Set</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, control_althold.o(i.Thr_Scale_Set))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;land_althold
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ncq_control_althold
</UL>

<P><STRONG><a name="[9e]"></a>Throttle_Angle_Compensate</STRONG> (Thumb, 538 bytes, Stack size 24 bytes, wp_ctrl.o(i.Throttle_Angle_Compensate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Throttle_Angle_Compensate &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Output
</UL>

<P><STRONG><a name="[a4]"></a>Throttle_Control_Reset</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, pid.o(i.Throttle_Control_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Throttle_Control_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_LPF_Reset
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Integrate_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Output
</UL>

<P><STRONG><a name="[1c5]"></a>Time0A_init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, time_cnt.o(i.Time0A_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Time0A_init &rArr; TimerIntRegister &rArr; _TimerIntNumberGet
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntRegister
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntEnable
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_init
</UL>

<P><STRONG><a name="[109]"></a>Time_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, time_cnt.o(i.Time_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Time_init &rArr; Schedule_init &rArr; TimerIntRegister &rArr; _TimerIntNumberGet
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schedule_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0A_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[19b]"></a>TimerConfigure</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, timer.o(i.TimerConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schedule_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0A_init
</UL>

<P><STRONG><a name="[19f]"></a>TimerEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.TimerEnable))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schedule_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0A_init
</UL>

<P><STRONG><a name="[1c3]"></a>TimerIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(i.TimerIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0A_Handler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1A_Handler
</UL>

<P><STRONG><a name="[19d]"></a>TimerIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.TimerIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schedule_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0A_init
</UL>

<P><STRONG><a name="[19e]"></a>TimerIntRegister</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, timer.o(i.TimerIntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TimerIntRegister &rArr; _TimerIntNumberGet
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TimerIntNumberGet
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schedule_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0A_init
</UL>

<P><STRONG><a name="[19c]"></a>TimerLoadSet</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i.TimerLoadSet))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Schedule_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0A_init
</UL>

<P><STRONG><a name="[5d]"></a>Top_APrilTag_Control_Pliot</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, opticalflow_control.o(i.Top_APrilTag_Control_Pliot))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Top_APrilTag_Control_Pliot &rArr; OpticalFlow_Control_Pure &rArr; OpticalFlow_Vel_Control &rArr; accel_to_lean_angles &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_SDK_Err_LPF
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Vel_Control
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control_Pure
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Flight_Ctrl
</UL>

<P><STRONG><a name="[70]"></a>Total_Control</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wp_ctrl.o(i.Total_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Total_Control &rArr; Main_Leading_Control &rArr; Auto_Flight_Ctrl &rArr; NCQ_SDK_Run &rArr; move_with_z_target &rArr; OpticalFlow_Control_Pure &rArr; OpticalFlow_Vel_Control &rArr; accel_to_lean_angles &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Leading_Control
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryPilot_Control
</UL>

<P><STRONG><a name="[161]"></a>Total_PID_Init</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, pid.o(i.Total_PID_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Total_PID_Init &rArr; Set_Cutoff_Frequency &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Cutoff_Frequency
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Or_Reset_PID_Parameter
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Paramter_Init_With_Flash
</UL>

<P><STRONG><a name="[d]"></a>UART0_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usart.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART0_IRQHandler &rArr; RingBuf_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntStatus
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntClear
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharsAvail
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGet
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.ConfigureUART0)
</UL>
<P><STRONG><a name="[e]"></a>UART1_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usart.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UART1_IRQHandler &rArr; NCLink_Data_Prase_Prepare &rArr; NCLink_Data_Prase_Process &rArr; Other_Parameter_Default &rArr; WriteFlashParameter &rArr; EEPROMProgram &rArr; _EEPROMSectorMaskSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntStatus
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntClear
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharsAvail
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGet
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Data_Prase_Prepare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.ConfigureUART1)
</UL>
<P><STRONG><a name="[10]"></a>UART2_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usart.o(i.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART2_IRQHandler &rArr; RingBuf_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntStatus
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntClear
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharsAvail
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGet
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.ConfigureUART6)
</UL>
<P><STRONG><a name="[f]"></a>UART3_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usart.o(i.UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART3_IRQHandler &rArr; RingBuf_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntStatus
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntClear
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharsAvail
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGet
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.ConfigureUART3)
</UL>
<P><STRONG><a name="[11]"></a>UART7_IRQHandler</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, usart.o(i.UART7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART7_IRQHandler &rArr; RingBuf_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntStatus
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntClear
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharsAvail
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGet
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.ConfigureUART7)
</UL>
<P><STRONG><a name="[89]"></a>UARTCharGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(i.UARTCharGet))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Init_Uart
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[1a0]"></a>UARTCharPut</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(i.UARTCharPut))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorConfig_UartSend
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Send
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Send
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US_100_Start
</UL>

<P><STRONG><a name="[88]"></a>UARTCharsAvail</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.UARTCharsAvail))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Init_Uart
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[8d]"></a>UARTClockSourceSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.UARTClockSourceSet))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART1
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART0
</UL>

<P><STRONG><a name="[95]"></a>UARTConfigSetExpClk</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, uart.o(i.UARTConfigSetExpClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UARTConfigSetExpClk
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEnable
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART7
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART6
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART3
</UL>

<P><STRONG><a name="[1cb]"></a>UARTDisable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uart.o(i.UARTDisable))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
</UL>

<P><STRONG><a name="[1cc]"></a>UARTEnable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(i.UARTEnable))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
</UL>

<P><STRONG><a name="[8f]"></a>UARTFIFODisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(i.UARTFIFODisable))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART7
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART1
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART0
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART6
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART3
</UL>

<P><STRONG><a name="[1c9]"></a>UARTIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(i.UARTIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[90]"></a>UARTIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(i.UARTIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART7
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART1
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART0
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART6
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART3
</UL>

<P><STRONG><a name="[91]"></a>UARTIntRegister</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, uart.o(i.UARTIntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UARTIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UARTIntNumberGet
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART7
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART1
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART0
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART6
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART3
</UL>

<P><STRONG><a name="[1c8]"></a>UARTIntStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.UARTIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[8e]"></a>UARTStdioConfig</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, uartstdio.o(i.UARTStdioConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UARTStdioConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART1
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART0
</UL>

<P><STRONG><a name="[18e]"></a>USART0_Send</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usart.o(i.USART0_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART0_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DT_Send_Check
</UL>

<P><STRONG><a name="[1a5]"></a>USART1_Send</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usart.o(i.USART1_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Data_Send
</UL>

<P><STRONG><a name="[18d]"></a>USART3_Send</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usart.o(i.USART3_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART3_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DT_Send_Check
</UL>

<P><STRONG><a name="[1cf]"></a>US_100_Distance</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, us_100.o(i.US_100_Distance))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US_100_Statemachine
</UL>

<P><STRONG><a name="[1ce]"></a>US_100_Start</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, us_100.o(i.US_100_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = US_100_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US_100_Statemachine
</UL>

<P><STRONG><a name="[f5]"></a>US_100_Statemachine</STRONG> (Thumb, 546 bytes, Stack size 8 bytes, us_100.o(i.US_100_Statemachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = US_100_Statemachine &rArr; US_100_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US_100_Start
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US_100_Distance
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ground_Sensor_Statemachine
</UL>

<P><STRONG><a name="[9b]"></a>VL53L1Init</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, vl53l1x.o(i.VL53L1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = VL53L1Init &rArr; VL53L1_StartMeasurement &rArr; VL53L1_init_and_start_range &rArr; VL53L1_WriteMulti &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitDeviceBooted
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_StopMeasurement
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_StaticInit
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_StartMeasurement
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetInterMeasurementPeriodMilliSeconds
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetDistanceMode
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_RdWord
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_I2C_Init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_DataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART7
</UL>

<P><STRONG><a name="[f8]"></a>VL53L1X_Get_Distance</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, vl53l1x.o(i.VL53L1X_Get_Distance))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = VL53L1X_Get_Distance &rArr; VL53L1_GetRangingMeasurementData &rArr; VL53L1_get_device_results &rArr; VL53L1_get_measurement_results &rArr; VL53L1_ReadMulti &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Period
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetRangingMeasurementData
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetMeasurementDataReady
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ClearInterruptAndStartMeasurement
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ground_Sensor_Statemachine
</UL>

<P><STRONG><a name="[1dc]"></a>VL53L1_ClearInterruptAndStartMeasurement</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, vl53l1_api.o(i.VL53L1_ClearInterruptAndStartMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = VL53L1_ClearInterruptAndStartMeasurement &rArr; ChangePresetMode &rArr; VL53L1_init_and_start_range &rArr; VL53L1_WriteMulti &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_clear_interrupt_and_enable_next_range
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePresetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1X_Get_Distance
</UL>

<P><STRONG><a name="[1d3]"></a>VL53L1_DataInit</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, vl53l1_api.o(i.VL53L1_DataInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = VL53L1_DataInit &rArr; VL53L1_data_init &rArr; VL53L1_set_preset_mode &rArr; VL53L1_preset_mode_low_power_auto_short_ranging &rArr; VL53L1_preset_mode_timed_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetLimitCheckValue
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetLimitCheckEnable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1Init
</UL>

<P><STRONG><a name="[1b0]"></a>VL53L1_GetLimitCheckEnable</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, vl53l1_api.o(i.VL53L1_GetLimitCheckEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_GetLimitCheckEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSimpleData
</UL>

<P><STRONG><a name="[1af]"></a>VL53L1_GetLimitCheckValue</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, vl53l1_api.o(i.VL53L1_GetLimitCheckValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_GetLimitCheckValue &rArr; VL53L1_get_lite_sigma_threshold
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_lite_sigma_threshold
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_lite_min_count_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSimpleData
</UL>

<P><STRONG><a name="[1da]"></a>VL53L1_GetMeasurementDataReady</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, vl53l1_api.o(i.VL53L1_GetMeasurementDataReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = VL53L1_GetMeasurementDataReady &rArr; VL53L1_is_new_data_ready &rArr; VL53L1_RdByte &rArr; VL53L1_read_byte &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_is_new_data_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1X_Get_Distance
</UL>

<P><STRONG><a name="[1db]"></a>VL53L1_GetRangingMeasurementData</STRONG> (Thumb, 68 bytes, Stack size 160 bytes, vl53l1_api.o(i.VL53L1_GetRangingMeasurementData))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = VL53L1_GetRangingMeasurementData &rArr; VL53L1_get_device_results &rArr; VL53L1_get_measurement_results &rArr; VL53L1_ReadMulti &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSimpleData
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1X_Get_Distance
</UL>

<P><STRONG><a name="[1e5]"></a>VL53L1_GetSequenceStepEnable</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, vl53l1_api.o(i.VL53L1_GetSequenceStepEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_GetSequenceStepEnable &rArr; VL53L1_get_sequence_config_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_sequence_config_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetMeasurementTimingBudgetMicroSeconds
</UL>

<P><STRONG><a name="[1d0]"></a>VL53L1_I2C_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, vl53l1x_i2c.o(i.VL53L1_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VL53L1_I2C_Init &rArr; Delay_Ms &rArr; delay &rArr; delayMicroseconds &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1Init
</UL>

<P><STRONG><a name="[1e7]"></a>VL53L1_RdByte</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, vl53l1_platform.o(i.VL53L1_RdByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = VL53L1_RdByte &rArr; VL53L1_read_byte &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitValueMaskEx
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_is_new_data_ready
</UL>

<P><STRONG><a name="[1d1]"></a>VL53L1_RdWord</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, vl53l1_platform.o(i.VL53L1_RdWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = VL53L1_RdWord &rArr; VL53L1_read_word &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_word
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1Init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_p2p_data
</UL>

<P><STRONG><a name="[1ea]"></a>VL53L1_ReadMulti</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, vl53l1_platform.o(i.VL53L1_ReadMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = VL53L1_ReadMulti &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_multi
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_static_nvm_managed
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_nvm_copy_data
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_customer_nvm_managed
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_measurement_results
</UL>

<P><STRONG><a name="[1ec]"></a>VL53L1_SDA_IN</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, vl53l1x_i2c.o(i.VL53L1_SDA_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_SDA_IN &rArr; GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Wait_Ack
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Read_Byte
</UL>

<P><STRONG><a name="[1ed]"></a>VL53L1_SDA_OUT</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, vl53l1x_i2c.o(i.VL53L1_SDA_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Stop
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Start
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Send_Byte
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_NAck
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Ack
</UL>

<P><STRONG><a name="[1d5]"></a>VL53L1_SetDistanceMode</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, vl53l1_api.o(i.VL53L1_SetDistanceMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = VL53L1_SetDistanceMode &rArr; SetPresetMode &rArr; VL53L1_set_preset_mode &rArr; VL53L1_preset_mode_low_power_auto_short_ranging &rArr; VL53L1_preset_mode_timed_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_user_zone
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_timeouts_us
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_user_zone
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_timeouts_us
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPresetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1Init
</UL>

<P><STRONG><a name="[1d7]"></a>VL53L1_SetInterMeasurementPeriodMilliSeconds</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, vl53l1_api.o(i.VL53L1_SetInterMeasurementPeriodMilliSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = VL53L1_SetInterMeasurementPeriodMilliSeconds &rArr; VL53L1_set_inter_measurement_period_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_inter_measurement_period_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1Init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetPresetMode
</UL>

<P><STRONG><a name="[1df]"></a>VL53L1_SetLimitCheckEnable</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, vl53l1_api.o(i.VL53L1_SetLimitCheckEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VL53L1_SetLimitCheckEnable &rArr; SetLimitValue &rArr; VL53L1_set_lite_sigma_threshold
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLimitValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_DataInit
</UL>

<P><STRONG><a name="[1e0]"></a>VL53L1_SetLimitCheckValue</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, vl53l1_api.o(i.VL53L1_SetLimitCheckValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VL53L1_SetLimitCheckValue &rArr; SetLimitValue &rArr; VL53L1_set_lite_sigma_threshold
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLimitValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_DataInit
</UL>

<P><STRONG><a name="[1d6]"></a>VL53L1_SetMeasurementTimingBudgetMicroSeconds</STRONG> (Thumb, 288 bytes, Stack size 64 bytes, vl53l1_api.o(i.VL53L1_SetMeasurementTimingBudgetMicroSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = VL53L1_SetMeasurementTimingBudgetMicroSeconds &rArr; VL53L1_set_timeouts_us &rArr; VL53L1_calc_timeout_register_values &rArr; VL53L1_calc_encoded_timeout &rArr; VL53L1_encode_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_timeouts_us
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_tuning_parm
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_timeouts_us
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetSequenceStepEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1Init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetPresetMode
</UL>

<P><STRONG><a name="[1f0]"></a>VL53L1_SetPresetMode</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, vl53l1_api.o(i.VL53L1_SetPresetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = VL53L1_SetPresetMode &rArr; SetPresetMode &rArr; VL53L1_set_preset_mode &rArr; VL53L1_preset_mode_low_power_auto_short_ranging &rArr; VL53L1_preset_mode_timed_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetInterMeasurementPeriodMilliSeconds
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPresetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_StaticInit
</UL>

<P><STRONG><a name="[1d9]"></a>VL53L1_StartMeasurement</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, vl53l1_api.o(i.VL53L1_StartMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = VL53L1_StartMeasurement &rArr; VL53L1_init_and_start_range &rArr; VL53L1_WriteMulti &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1Init
</UL>

<P><STRONG><a name="[1d4]"></a>VL53L1_StaticInit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, vl53l1_api.o(i.VL53L1_StaticInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = VL53L1_StaticInit &rArr; VL53L1_SetPresetMode &rArr; SetPresetMode &rArr; VL53L1_set_preset_mode &rArr; VL53L1_preset_mode_low_power_auto_short_ranging &rArr; VL53L1_preset_mode_timed_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetPresetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1Init
</UL>

<P><STRONG><a name="[1d8]"></a>VL53L1_StopMeasurement</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, vl53l1_api.o(i.VL53L1_StopMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = VL53L1_StopMeasurement &rArr; VL53L1_stop_range &rArr; VL53L1_set_system_control &rArr; VL53L1_WriteMulti &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_stop_range
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1Init
</UL>

<P><STRONG><a name="[1d2]"></a>VL53L1_WaitDeviceBooted</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, vl53l1_api.o(i.VL53L1_WaitDeviceBooted))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = VL53L1_WaitDeviceBooted &rArr; VL53L1_poll_for_boot_completion &rArr; VL53L1_WaitValueMaskEx &rArr; VL53L1_RdByte &rArr; VL53L1_read_byte &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_poll_for_boot_completion
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1Init
</UL>

<P><STRONG><a name="[1f3]"></a>VL53L1_WaitMs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vl53l1_platform.o(i.VL53L1_WaitMs))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitValueMaskEx
</UL>

<P><STRONG><a name="[77]"></a>VL53L1_WaitUs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vl53l1_platform.o(i.VL53L1_WaitUs))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_poll_for_boot_completion
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePresetMode
</UL>

<P><STRONG><a name="[1f2]"></a>VL53L1_WaitValueMaskEx</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, vl53l1_platform.o(i.VL53L1_WaitValueMaskEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = VL53L1_WaitValueMaskEx &rArr; VL53L1_RdByte &rArr; VL53L1_read_byte &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitMs
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_RdByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_poll_for_boot_completion
</UL>

<P><STRONG><a name="[1f4]"></a>VL53L1_WriteMulti</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, vl53l1_platform.o(i.VL53L1_WriteMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = VL53L1_WriteMulti &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_write_multi
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_system_control
</UL>

<P><STRONG><a name="[1f6]"></a>VL53L1_calc_decoded_timeout_us</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, vl53l1_core.o(i.VL53L1_calc_decoded_timeout_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_calc_decoded_timeout_us &rArr; VL53L1_calc_timeout_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_decode_timeout
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_timeout_us
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_timeouts_us
</UL>

<P><STRONG><a name="[1f9]"></a>VL53L1_calc_encoded_timeout</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, vl53l1_core.o(i.VL53L1_calc_encoded_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = VL53L1_calc_encoded_timeout &rArr; VL53L1_encode_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_encode_timeout
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_timeout_mclks
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_timeout_register_values
</UL>

<P><STRONG><a name="[1fc]"></a>VL53L1_calc_macro_period_us</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, vl53l1_core.o(i.VL53L1_calc_macro_period_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53L1_calc_macro_period_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_decode_vcsel_period
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_pll_period_us
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_timeouts_us
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_timeout_register_values
</UL>

<P><STRONG><a name="[1fd]"></a>VL53L1_calc_pll_period_us</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, vl53l1_core_support.o(i.VL53L1_calc_pll_period_us))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_macro_period_us
</UL>

<P><STRONG><a name="[22b]"></a>VL53L1_calc_range_ignore_threshold</STRONG> (Thumb, 104 bytes, Stack size 28 bytes, vl53l1_core.o(i.VL53L1_calc_range_ignore_threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = VL53L1_calc_range_ignore_threshold
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_xtalk_config_struct
</UL>

<P><STRONG><a name="[1fa]"></a>VL53L1_calc_timeout_mclks</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, vl53l1_core.o(i.VL53L1_calc_timeout_mclks))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_encoded_timeout
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_timeout_register_values
</UL>

<P><STRONG><a name="[1ff]"></a>VL53L1_calc_timeout_register_values</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, vl53l1_core.o(i.VL53L1_calc_timeout_register_values))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = VL53L1_calc_timeout_register_values &rArr; VL53L1_calc_encoded_timeout &rArr; VL53L1_encode_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_timeout_mclks
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_encoded_timeout
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_macro_period_us
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_timeouts_us
</UL>

<P><STRONG><a name="[1f8]"></a>VL53L1_calc_timeout_us</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, vl53l1_core.o(i.VL53L1_calc_timeout_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VL53L1_calc_timeout_us
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_timeouts_us
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_decoded_timeout_us
</UL>

<P><STRONG><a name="[210]"></a>VL53L1_check_ll_driver_rd_state</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, vl53l1_core.o(i.VL53L1_check_ll_driver_rd_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VL53L1_check_ll_driver_rd_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
</UL>

<P><STRONG><a name="[1dd]"></a>VL53L1_clear_interrupt_and_enable_next_range</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, vl53l1_api_core.o(i.VL53L1_clear_interrupt_and_enable_next_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = VL53L1_clear_interrupt_and_enable_next_range &rArr; VL53L1_init_and_start_range &rArr; VL53L1_WriteMulti &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ClearInterruptAndStartMeasurement
</UL>

<P><STRONG><a name="[22e]"></a>VL53L1_config_low_power_auto_mode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_config_low_power_auto_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_config_low_power_auto_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_short_ranging
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_ranging
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_long_ranging
</UL>

<P><STRONG><a name="[23b]"></a>VL53L1_copy_rtn_good_spads_to_buffer</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, vl53l1_core.o(i.VL53L1_copy_rtn_good_spads_to_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_p2p_data
</UL>

<P><STRONG><a name="[20d]"></a>VL53L1_copy_sys_and_core_results_to_range_results</STRONG> (Thumb, 486 bytes, Stack size 24 bytes, vl53l1_api_core.o(i.VL53L1_copy_sys_and_core_results_to_range_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53L1_copy_sys_and_core_results_to_range_results
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
</UL>

<P><STRONG><a name="[1de]"></a>VL53L1_data_init</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, vl53l1_api_core.o(i.VL53L1_data_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = VL53L1_data_init &rArr; VL53L1_set_preset_mode &rArr; VL53L1_preset_mode_low_power_auto_short_ranging &rArr; VL53L1_preset_mode_timed_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_low_power_auto_data_init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_xtalk_config_struct
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_version
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_tuning_parm_storage_struct
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_ssc_config_struct
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_refspadchar_config_struct
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_offset_cal_config_struct
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_ll_driver_state
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_vhv_loopbound
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_p2p_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_DataInit
</UL>

<P><STRONG><a name="[215]"></a>VL53L1_decode_row_col</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, vl53l1_core_support.o(i.VL53L1_decode_row_col))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_user_zone
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_mode_mitigation_roi
</UL>

<P><STRONG><a name="[1f7]"></a>VL53L1_decode_timeout</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, vl53l1_core.o(i.VL53L1_decode_timeout))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_decoded_timeout_us
</UL>

<P><STRONG><a name="[1fe]"></a>VL53L1_decode_vcsel_period</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vl53l1_core_support.o(i.VL53L1_decode_vcsel_period))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_macro_period_us
</UL>

<P><STRONG><a name="[21a]"></a>VL53L1_decode_zone_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vl53l1_core.o(i.VL53L1_decode_zone_size))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_user_zone
</UL>

<P><STRONG><a name="[23d]"></a>VL53L1_encode_row_col</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_encode_row_col))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_encode_row_col
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_user_zone
</UL>

<P><STRONG><a name="[1fb]"></a>VL53L1_encode_timeout</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_encode_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_encode_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_encoded_timeout
</UL>

<P><STRONG><a name="[23e]"></a>VL53L1_encode_zone_size</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vl53l1_core.o(i.VL53L1_encode_zone_size))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_user_zone
</UL>

<P><STRONG><a name="[20a]"></a>VL53L1_get_customer_nvm_managed</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, vl53l1_register_funcs.o(i.VL53L1_get_customer_nvm_managed))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = VL53L1_get_customer_nvm_managed &rArr; VL53L1_ReadMulti &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ReadMulti
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_customer_nvm_managed
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_p2p_data
</UL>

<P><STRONG><a name="[1e4]"></a>VL53L1_get_device_results</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, vl53l1_api_core.o(i.VL53L1_get_device_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = VL53L1_get_device_results &rArr; VL53L1_get_measurement_results &rArr; VL53L1_ReadMulti &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_low_power_auto_update_DSS
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_low_power_auto_setup_manual_calibration
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_check_ll_driver_rd_state
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_measurement_results
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_copy_sys_and_core_results_to_range_results
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetRangingMeasurementData
</UL>

<P><STRONG><a name="[1e2]"></a>VL53L1_get_lite_min_count_rate</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, vl53l1_api_core.o(i.VL53L1_get_lite_min_count_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_get_lite_min_count_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetLimitCheckValue
</UL>

<P><STRONG><a name="[1e1]"></a>VL53L1_get_lite_sigma_threshold</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, vl53l1_api_core.o(i.VL53L1_get_lite_sigma_threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_get_lite_sigma_threshold
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetLimitCheckValue
</UL>

<P><STRONG><a name="[20c]"></a>VL53L1_get_measurement_results</STRONG> (Thumb, 178 bytes, Stack size 304 bytes, vl53l1_api_core.o(i.VL53L1_get_measurement_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = VL53L1_get_measurement_results &rArr; VL53L1_ReadMulti &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ReadMulti
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_system_results
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_debug_results
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_core_results
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
</UL>

<P><STRONG><a name="[214]"></a>VL53L1_get_mode_mitigation_roi</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, vl53l1_api_core.o(i.VL53L1_get_mode_mitigation_roi))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53L1_get_mode_mitigation_roi
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_decode_row_col
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_p2p_data
</UL>

<P><STRONG><a name="[216]"></a>VL53L1_get_nvm_copy_data</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, vl53l1_register_funcs.o(i.VL53L1_get_nvm_copy_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = VL53L1_get_nvm_copy_data &rArr; VL53L1_ReadMulti &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ReadMulti
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_nvm_copy_data
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_p2p_data
</UL>

<P><STRONG><a name="[1aa]"></a>VL53L1_get_preset_mode_timing_cfg</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, vl53l1_api_core.o(i.VL53L1_get_preset_mode_timing_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53L1_get_preset_mode_timing_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPresetMode
</UL>

<P><STRONG><a name="[1e6]"></a>VL53L1_get_sequence_config_bit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, vl53l1_api_core.o(i.VL53L1_get_sequence_config_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_get_sequence_config_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetSequenceStepEnable
</UL>

<P><STRONG><a name="[218]"></a>VL53L1_get_static_nvm_managed</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, vl53l1_register_funcs.o(i.VL53L1_get_static_nvm_managed))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = VL53L1_get_static_nvm_managed &rArr; VL53L1_ReadMulti &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ReadMulti
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_static_nvm_managed
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_p2p_data
</UL>

<P><STRONG><a name="[75]"></a>VL53L1_get_timeouts_us</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, vl53l1_api_core.o(i.VL53L1_get_timeouts_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = VL53L1_get_timeouts_us &rArr; VL53L1_calc_decoded_timeout_us &rArr; VL53L1_calc_timeout_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_timeout_us
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_macro_period_us
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_decoded_timeout_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetDistanceMode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePresetMode
</UL>

<P><STRONG><a name="[1ef]"></a>VL53L1_get_tuning_parm</STRONG> (Thumb, 606 bytes, Stack size 16 bytes, vl53l1_api_core.o(i.VL53L1_get_tuning_parm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_get_tuning_parm
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetMeasurementTimingBudgetMicroSeconds
</UL>

<P><STRONG><a name="[74]"></a>VL53L1_get_user_zone</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, vl53l1_api_core.o(i.VL53L1_get_user_zone))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53L1_get_user_zone
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_decode_zone_size
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_decode_row_col
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetDistanceMode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePresetMode
</UL>

<P><STRONG><a name="[212]"></a>VL53L1_i2c_decode_core_results</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_decode_core_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53L1_i2c_decode_core_results &rArr; VL53L1_i2c_decode_uint32_t
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_uint32_t
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_int32_t
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_measurement_results
</UL>

<P><STRONG><a name="[20b]"></a>VL53L1_i2c_decode_customer_nvm_managed</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_decode_customer_nvm_managed))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53L1_i2c_decode_customer_nvm_managed &rArr; VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_uint16_t
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_int16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_customer_nvm_managed
</UL>

<P><STRONG><a name="[211]"></a>VL53L1_i2c_decode_debug_results</STRONG> (Thumb, 394 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_decode_debug_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53L1_i2c_decode_debug_results &rArr; VL53L1_i2c_decode_uint32_t
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_uint32_t
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_measurement_results
</UL>

<P><STRONG><a name="[21e]"></a>VL53L1_i2c_decode_int16_t</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_i2c_decode_int16_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_i2c_decode_int16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_customer_nvm_managed
</UL>

<P><STRONG><a name="[21c]"></a>VL53L1_i2c_decode_int32_t</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_i2c_decode_int32_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_i2c_decode_int32_t
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_core_results
</UL>

<P><STRONG><a name="[217]"></a>VL53L1_i2c_decode_nvm_copy_data</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_decode_nvm_copy_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53L1_i2c_decode_nvm_copy_data &rArr; VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_nvm_copy_data
</UL>

<P><STRONG><a name="[219]"></a>VL53L1_i2c_decode_static_nvm_managed</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_decode_static_nvm_managed))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53L1_i2c_decode_static_nvm_managed &rArr; VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_static_nvm_managed
</UL>

<P><STRONG><a name="[213]"></a>VL53L1_i2c_decode_system_results</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_decode_system_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53L1_i2c_decode_system_results &rArr; VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_measurement_results
</UL>

<P><STRONG><a name="[21d]"></a>VL53L1_i2c_decode_uint16_t</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_i2c_decode_uint16_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_system_results
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_debug_results
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_static_nvm_managed
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_nvm_copy_data
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_customer_nvm_managed
</UL>

<P><STRONG><a name="[21b]"></a>VL53L1_i2c_decode_uint32_t</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_i2c_decode_uint32_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_i2c_decode_uint32_t
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_debug_results
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_core_results
</UL>

<P><STRONG><a name="[21f]"></a>VL53L1_i2c_encode_customer_nvm_managed</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_encode_customer_nvm_managed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_i2c_encode_customer_nvm_managed &rArr; VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_uint16_t
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_int16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[222]"></a>VL53L1_i2c_encode_dynamic_config</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_encode_dynamic_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_i2c_encode_dynamic_config &rArr; VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[223]"></a>VL53L1_i2c_encode_general_config</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_encode_general_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_i2c_encode_general_config &rArr; VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[221]"></a>VL53L1_i2c_encode_int16_t</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, vl53l1_core.o(i.VL53L1_i2c_encode_int16_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_i2c_encode_int16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_customer_nvm_managed
</UL>

<P><STRONG><a name="[224]"></a>VL53L1_i2c_encode_static_config</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_encode_static_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_i2c_encode_static_config &rArr; VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[225]"></a>VL53L1_i2c_encode_static_nvm_managed</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_encode_static_nvm_managed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_i2c_encode_static_nvm_managed &rArr; VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[228]"></a>VL53L1_i2c_encode_system_control</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_encode_system_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_i2c_encode_system_control
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_system_control
</UL>

<P><STRONG><a name="[226]"></a>VL53L1_i2c_encode_timing_config</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_encode_timing_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_i2c_encode_timing_config &rArr; VL53L1_i2c_encode_uint32_t
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_uint32_t
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[220]"></a>VL53L1_i2c_encode_uint16_t</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, vl53l1_core.o(i.VL53L1_i2c_encode_uint16_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_timing_config
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_static_nvm_managed
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_static_config
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_general_config
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_dynamic_config
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_customer_nvm_managed
</UL>

<P><STRONG><a name="[227]"></a>VL53L1_i2c_encode_uint32_t</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, vl53l1_core.o(i.VL53L1_i2c_encode_uint32_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_i2c_encode_uint32_t
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_timing_config
</UL>

<P><STRONG><a name="[7b]"></a>VL53L1_init_and_start_range</STRONG> (Thumb, 628 bytes, Stack size 344 bytes, vl53l1_api_core.o(i.VL53L1_init_and_start_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = VL53L1_init_and_start_range &rArr; VL53L1_WriteMulti &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WriteMulti
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_update_ll_driver_rd_state
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_update_ll_driver_cfg_state
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_timing_config
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_system_control
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_static_nvm_managed
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_static_config
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_general_config
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_dynamic_config
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_customer_nvm_managed
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_StartMeasurement
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_clear_interrupt_and_enable_next_range
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePresetMode
</UL>

<P><STRONG><a name="[200]"></a>VL53L1_init_ll_driver_state</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_init_ll_driver_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_init_ll_driver_state
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_stop_range
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_poll_for_boot_completion
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[206]"></a>VL53L1_init_offset_cal_config_struct</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, vl53l1_api_preset_modes.o(i.VL53L1_init_offset_cal_config_struct))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[203]"></a>VL53L1_init_refspadchar_config_struct</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, vl53l1_api_preset_modes.o(i.VL53L1_init_refspadchar_config_struct))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[204]"></a>VL53L1_init_ssc_config_struct</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, vl53l1_api_preset_modes.o(i.VL53L1_init_ssc_config_struct))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[207]"></a>VL53L1_init_tuning_parm_storage_struct</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, vl53l1_api_preset_modes.o(i.VL53L1_init_tuning_parm_storage_struct))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[201]"></a>VL53L1_init_version</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, vl53l1_core.o(i.VL53L1_init_version))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[205]"></a>VL53L1_init_xtalk_config_struct</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, vl53l1_api_preset_modes.o(i.VL53L1_init_xtalk_config_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = VL53L1_init_xtalk_config_struct &rArr; VL53L1_calc_range_ignore_threshold
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_range_ignore_threshold
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[1e3]"></a>VL53L1_is_new_data_ready</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, vl53l1_wait.o(i.VL53L1_is_new_data_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = VL53L1_is_new_data_ready &rArr; VL53L1_RdByte &rArr; VL53L1_read_byte &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_RdByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetMeasurementDataReady
</UL>

<P><STRONG><a name="[209]"></a>VL53L1_low_power_auto_data_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_low_power_auto_data_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_low_power_auto_data_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[23f]"></a>VL53L1_low_power_auto_data_stop_range</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_low_power_auto_data_stop_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_low_power_auto_data_stop_range
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_stop_range
</UL>

<P><STRONG><a name="[20e]"></a>VL53L1_low_power_auto_setup_manual_calibration</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_low_power_auto_setup_manual_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_low_power_auto_setup_manual_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
</UL>

<P><STRONG><a name="[20f]"></a>VL53L1_low_power_auto_update_DSS</STRONG> (Thumb, 158 bytes, Stack size 12 bytes, vl53l1_core.o(i.VL53L1_low_power_auto_update_DSS))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_low_power_auto_update_DSS
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
</UL>

<P><STRONG><a name="[1f1]"></a>VL53L1_poll_for_boot_completion</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, vl53l1_wait.o(i.VL53L1_poll_for_boot_completion))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = VL53L1_poll_for_boot_completion &rArr; VL53L1_WaitValueMaskEx &rArr; VL53L1_RdByte &rArr; VL53L1_read_byte &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitValueMaskEx
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitUs
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_ll_driver_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitDeviceBooted
</UL>

<P><STRONG><a name="[22c]"></a>VL53L1_preset_mode_low_power_auto_long_ranging</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_low_power_auto_long_ranging))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = VL53L1_preset_mode_low_power_auto_long_ranging &rArr; VL53L1_preset_mode_timed_ranging_long_range &rArr; VL53L1_preset_mode_standard_ranging_long_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_config_low_power_auto_mode
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging_long_range
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[22f]"></a>VL53L1_preset_mode_low_power_auto_ranging</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_low_power_auto_ranging))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = VL53L1_preset_mode_low_power_auto_ranging &rArr; VL53L1_preset_mode_timed_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_config_low_power_auto_mode
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[231]"></a>VL53L1_preset_mode_low_power_auto_short_ranging</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_low_power_auto_short_ranging))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = VL53L1_preset_mode_low_power_auto_short_ranging &rArr; VL53L1_preset_mode_timed_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_config_low_power_auto_mode
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging_short_range
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[233]"></a>VL53L1_preset_mode_olt</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_olt))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = VL53L1_preset_mode_olt &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[235]"></a>VL53L1_preset_mode_singleshot_ranging</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_singleshot_ranging))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = VL53L1_preset_mode_singleshot_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[234]"></a>VL53L1_preset_mode_standard_ranging</STRONG> (Thumb, 314 bytes, Stack size 20 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_standard_ranging))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_short_range
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_mm2_cal
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_mm1_cal
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_long_range
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_singleshot_ranging
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_olt
</UL>

<P><STRONG><a name="[236]"></a>VL53L1_preset_mode_standard_ranging_long_range</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_standard_ranging_long_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = VL53L1_preset_mode_standard_ranging_long_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging_long_range
</UL>

<P><STRONG><a name="[237]"></a>VL53L1_preset_mode_standard_ranging_mm1_cal</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_standard_ranging_mm1_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = VL53L1_preset_mode_standard_ranging_mm1_cal &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[238]"></a>VL53L1_preset_mode_standard_ranging_mm2_cal</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_standard_ranging_mm2_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = VL53L1_preset_mode_standard_ranging_mm2_cal &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[239]"></a>VL53L1_preset_mode_standard_ranging_short_range</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_standard_ranging_short_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging_short_range
</UL>

<P><STRONG><a name="[230]"></a>VL53L1_preset_mode_timed_ranging</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_timed_ranging))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = VL53L1_preset_mode_timed_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_ranging
</UL>

<P><STRONG><a name="[22d]"></a>VL53L1_preset_mode_timed_ranging_long_range</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_timed_ranging_long_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = VL53L1_preset_mode_timed_ranging_long_range &rArr; VL53L1_preset_mode_standard_ranging_long_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_long_range
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_long_ranging
</UL>

<P><STRONG><a name="[232]"></a>VL53L1_preset_mode_timed_ranging_short_range</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_timed_ranging_short_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = VL53L1_preset_mode_timed_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_short_range
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_short_ranging
</UL>

<P><STRONG><a name="[1e8]"></a>VL53L1_read_byte</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, vl53l1x_i2c.o(i.VL53L1_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = VL53L1_read_byte &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_multi
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_RdByte
</UL>

<P><STRONG><a name="[1eb]"></a>VL53L1_read_multi</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, vl53l1x_i2c.o(i.VL53L1_read_multi))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_I2C_Read_nByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_word
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_byte
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ReadMulti
</UL>

<P><STRONG><a name="[202]"></a>VL53L1_read_p2p_data</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, vl53l1_api_core.o(i.VL53L1_read_p2p_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = VL53L1_read_p2p_data &rArr; VL53L1_get_nvm_copy_data &rArr; VL53L1_ReadMulti &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_RdWord
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_static_nvm_managed
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_nvm_copy_data
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_customer_nvm_managed
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_copy_rtn_good_spads_to_buffer
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_mode_mitigation_roi
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[1e9]"></a>VL53L1_read_word</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, vl53l1x_i2c.o(i.VL53L1_read_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = VL53L1_read_word &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_multi
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_RdWord
</UL>

<P><STRONG><a name="[1ee]"></a>VL53L1_set_inter_measurement_period_ms</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, vl53l1_api_core.o(i.VL53L1_set_inter_measurement_period_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_set_inter_measurement_period_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetInterMeasurementPeriodMilliSeconds
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[1a8]"></a>VL53L1_set_lite_min_count_rate</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, vl53l1_api_core.o(i.VL53L1_set_lite_min_count_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_set_lite_min_count_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLimitValue
</UL>

<P><STRONG><a name="[1a7]"></a>VL53L1_set_lite_sigma_threshold</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, vl53l1_api_core.o(i.VL53L1_set_lite_sigma_threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_set_lite_sigma_threshold
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLimitValue
</UL>

<P><STRONG><a name="[1ab]"></a>VL53L1_set_preset_mode</STRONG> (Thumb, 474 bytes, Stack size 80 bytes, vl53l1_api_core.o(i.VL53L1_set_preset_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = VL53L1_set_preset_mode &rArr; VL53L1_preset_mode_low_power_auto_short_ranging &rArr; VL53L1_preset_mode_timed_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_timeouts_us
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_inter_measurement_period_ms
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging_short_range
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging_long_range
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_short_range
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_mm2_cal
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_mm1_cal
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_long_range
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_singleshot_ranging
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_olt
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_short_ranging
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_ranging
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_long_ranging
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_ll_driver_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPresetMode
</UL>

<P><STRONG><a name="[23c]"></a>VL53L1_set_system_control</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_set_system_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = VL53L1_set_system_control &rArr; VL53L1_WriteMulti &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WriteMulti
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_system_control
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_stop_range
</UL>

<P><STRONG><a name="[79]"></a>VL53L1_set_timeouts_us</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, vl53l1_api_core.o(i.VL53L1_set_timeouts_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = VL53L1_set_timeouts_us &rArr; VL53L1_calc_timeout_register_values &rArr; VL53L1_calc_encoded_timeout &rArr; VL53L1_encode_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_timeout_register_values
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetDistanceMode
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePresetMode
</UL>

<P><STRONG><a name="[7a]"></a>VL53L1_set_user_zone</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, vl53l1_api_core.o(i.VL53L1_set_user_zone))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53L1_set_user_zone &rArr; VL53L1_encode_row_col
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_encode_zone_size
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_encode_row_col
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetDistanceMode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePresetMode
</UL>

<P><STRONG><a name="[208]"></a>VL53L1_set_vhv_loopbound</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, vl53l1_api_core.o(i.VL53L1_set_vhv_loopbound))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_set_vhv_loopbound
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[76]"></a>VL53L1_stop_range</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, vl53l1_api_core.o(i.VL53L1_stop_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = VL53L1_stop_range &rArr; VL53L1_set_system_control &rArr; VL53L1_WriteMulti &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_system_control
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_low_power_auto_data_stop_range
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_ll_driver_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_StopMeasurement
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePresetMode
</UL>

<P><STRONG><a name="[22a]"></a>VL53L1_update_ll_driver_cfg_state</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_update_ll_driver_cfg_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_update_ll_driver_cfg_state
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[229]"></a>VL53L1_update_ll_driver_rd_state</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_update_ll_driver_rd_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_update_ll_driver_rd_state
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[1f5]"></a>VL53L1_write_multi</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, vl53l1x_i2c.o(i.VL53L1_write_multi))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_I2C_Write_nByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WriteMulti
</UL>

<P><STRONG><a name="[23a]"></a>VL_I2C_Read_nByte</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, vl53l1x_i2c.o(i.VL_I2C_Read_nByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Wait_Ack
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Stop
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Start
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Send_Byte
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Read_Byte
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_NAck
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_multi
</UL>

<P><STRONG><a name="[240]"></a>VL_I2C_Write_nByte</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, vl53l1x_i2c.o(i.VL_I2C_Write_nByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Wait_Ack
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Stop
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Start
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_write_multi
</UL>

<P><STRONG><a name="[247]"></a>VL_IIC_Ack</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, vl53l1x_i2c.o(i.VL_IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VL_IIC_Ack &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SDA_OUT
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_I2C_Read_nByte
</UL>

<P><STRONG><a name="[246]"></a>VL_IIC_NAck</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, vl53l1x_i2c.o(i.VL_IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VL_IIC_NAck &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SDA_OUT
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_I2C_Read_nByte
</UL>

<P><STRONG><a name="[245]"></a>VL_IIC_Read_Byte</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, vl53l1x_i2c.o(i.VL_IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VL_IIC_Read_Byte &rArr; VL53L1_SDA_IN &rArr; GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SDA_IN
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_I2C_Read_nByte
</UL>

<P><STRONG><a name="[242]"></a>VL_IIC_Send_Byte</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, vl53l1x_i2c.o(i.VL_IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VL_IIC_Send_Byte &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SDA_OUT
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_I2C_Write_nByte
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_I2C_Read_nByte
</UL>

<P><STRONG><a name="[241]"></a>VL_IIC_Start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, vl53l1x_i2c.o(i.VL_IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VL_IIC_Start &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_I2C_Write_nByte
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_I2C_Read_nByte
</UL>

<P><STRONG><a name="[244]"></a>VL_IIC_Stop</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, vl53l1x_i2c.o(i.VL_IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Wait_Ack
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_I2C_Write_nByte
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_I2C_Read_nByte
</UL>

<P><STRONG><a name="[243]"></a>VL_IIC_Wait_Ack</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, vl53l1x_i2c.o(i.VL_IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Stop
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SDA_IN
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_I2C_Write_nByte
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_I2C_Read_nByte
</UL>

<P><STRONG><a name="[a3]"></a>Value_Limit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wp_ctrl.o(i.Value_Limit))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Output
</UL>

<P><STRONG><a name="[193]"></a>Vector_From_BodyFrame2EarthFrame</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, sins.o(i.Vector_From_BodyFrame2EarthFrame))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SINS_Prepare
</UL>

<P><STRONG><a name="[fe]"></a>WP_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, license.o(i.WP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = WP_Init &rArr; ESC_HardWave_Init &rArr; ESC_Calibration &rArr; PWM_Output &rArr; PWMPulseWidthSet
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashParameterOne
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_I2C
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART1
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureUART0
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Simulation_PWM_Init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Start_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_HardWave_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[106]"></a>WP_Quad_Init</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, sensor.o(i.WP_Quad_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = WP_Quad_Init &rArr; Quaternion_Init &rArr; Euler_Angle_Init &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
</UL>

<P><STRONG><a name="[be]"></a>WriteFlashParameter</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, wp_flash.o(i.WriteFlashParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WriteFlashParameter &rArr; EEPROMProgram &rArr; _EEPROMSectorMaskSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashParameterALL
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Other_Parameter_Default
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_Calibration_Check
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_Calibration_Check
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Data_Prase_Process
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_HardWave_Init
</UL>

<P><STRONG><a name="[4e]"></a>WriteFlashParameter_Three</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, wp_flash.o(i.WriteFlashParameter_Three))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WriteFlashParameter_Three &rArr; EEPROMProgram &rArr; _EEPROMSectorMaskSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashParameterALL
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Calibration_Check
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Calibartion_LS
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Calibartion
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_PID_Parameter
</UL>

<P><STRONG><a name="[179]"></a>WriteFlashParameter_Two</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, wp_flash.o(i.WriteFlashParameter_Two))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WriteFlashParameter_Two &rArr; EEPROMProgram &rArr; _EEPROMSectorMaskSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashParameterALL
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Calibration_Check
</UL>

<P><STRONG><a name="[fc]"></a>Yaw_Fault_Check</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, wp_ctrl.o(i.Yaw_Fault_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Yaw_Fault_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Integrate_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Control
</UL>

<P><STRONG><a name="[24c]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[25b]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[ee]"></a>__hardfp_asin</STRONG> (Thumb, 770 bytes, Stack size 88 bytes, asin.o(i.__hardfp_asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_asin &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_Feedback
</UL>

<P><STRONG><a name="[cb]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init_Again
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Observation_Angle_Calculate
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[cf]"></a>__hardfp_atan2</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, atan2.o(i.__hardfp_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init_Again
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_Feedback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Observation_Angle_Calculate
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init
</UL>

<P><STRONG><a name="[ce]"></a>__hardfp_cos</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init_Again
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuComputeRotationMatrix
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init
</UL>

<P><STRONG><a name="[1b2]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Cutoff_Frequency
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longitude_scale
</UL>

<P><STRONG><a name="[268]"></a>__hardfp_floorf</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, floorf.o(i.__hardfp_floorf))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_declination
</UL>

<P><STRONG><a name="[e7]"></a>__hardfp_powf</STRONG> (Thumb, 1606 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_powf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Baro_Offset
</UL>

<P><STRONG><a name="[2d2]"></a>__mathlib_powf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf), UNUSED)

<P><STRONG><a name="[cd]"></a>__hardfp_sin</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init_Again
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuComputeRotationMatrix
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init
</UL>

<P><STRONG><a name="[ef]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LS_Calculate
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_Feedback
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick_AHRS_Update_IMU
</UL>

<P><STRONG><a name="[260]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pythagorous2
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pythagorous3
</UL>

<P><STRONG><a name="[1b1]"></a>__hardfp_tanf</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, tanf.o(i.__hardfp_tanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Cutoff_Frequency
</UL>

<P><STRONG><a name="[254]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[256]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[24e]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[255]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[24a]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[252]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[24b]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[24d]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[25e]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[259]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[25d]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[258]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[25a]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[25c]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[257]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[160]"></a>accel_to_lean_angles</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, control_poshold.o(i.accel_to_lean_angles))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = accel_to_lean_angles &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Vel_Control
</UL>

<P><STRONG><a name="[253]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[261]"></a>auto_altland</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, namelesscotrun_sdk.o(i.auto_altland))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = auto_altland &rArr; land_althold &rArr; PID_Control &rArr; Test_Period &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;land_althold
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_with_z_target
</UL>

<P><STRONG><a name="[d7]"></a>constrain_float</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, wp_math.o(i.constrain_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control_Div_LPF_For_Gyro
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ins_wave
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_declination
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longitude_scale
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter_Horizontal_GPS
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Vel_Control
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Pos_Control
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Rotate_Complementary_Filter
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_CF
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature_Ctrl
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Throttle_Angle_Compensate
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_to_lean_angles
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;land_althold
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ncq_control_althold
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_Alt_Hold_Control
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick_AHRS_Update_IMU
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Expect_Speed_Mapping
</UL>

<P><STRONG><a name="[188]"></a>constrain_int16_t</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rc.o(i.constrain_int16_t))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control
</UL>

<P><STRONG><a name="[ac]"></a>delay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, time.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = delay &rArr; delayMicroseconds &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
</UL>

<P><STRONG><a name="[264]"></a>delayMicroseconds</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, time.o(i.delayMicroseconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = delayMicroseconds &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>

<P><STRONG><a name="[86]"></a>delay_ms</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, time.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = delay_ms &rArr; Delay_Ms &rArr; delay &rArr; delayMicroseconds &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Calibration_Trigger
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_Calibration_Check
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Calibration_Check
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Init_Uart
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Calibration
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMC5883L_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_HardWave_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init
</UL>

<P><STRONG><a name="[265]"></a>delay_us</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, time.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = delay_us &rArr; delayMicroseconds &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_delay
</UL>

<P><STRONG><a name="[16d]"></a>display_6_8_number</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, oled.o(i.display_6_8_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = display_6_8_number &rArr; write_6_8_number &rArr; LCD_P6x8Str &rArr; LCD_Set_Pos &rArr; LCD_WrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_6_8_number
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
</UL>

<P><STRONG><a name="[16c]"></a>display_6_8_string</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, oled.o(i.display_6_8_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = display_6_8_string &rArr; LCD_P6x8Str &rArr; LCD_Set_Pos &rArr; LCD_WrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P6x8Str
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
</UL>

<P><STRONG><a name="[175]"></a>draw_gps_wave</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ssd1306.o(i.draw_gps_wave))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
</UL>

<P><STRONG><a name="[174]"></a>draw_ins_wave</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, ssd1306.o(i.draw_ins_wave))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = draw_ins_wave &rArr; ssd1306_display &rArr; draw_oled &rArr; LCD_Set_Pos &rArr; LCD_WrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_display
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_clear_display
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
</UL>

<P><STRONG><a name="[267]"></a>draw_oled</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ssd1306.o(i.draw_oled))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = draw_oled &rArr; LCD_Set_Pos &rArr; LCD_WrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WrDat
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_display
</UL>

<P><STRONG><a name="[24f]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[1a2]"></a>fast_atan</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, wp_math.o(i.fast_atan))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Parameter_Sort
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_to_lean_angles
</UL>

<P><STRONG><a name="[1b4]"></a>get_declination</STRONG> (Thumb, 386 bytes, Stack size 64 bytes, earth_declination.o(i.get_declination))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = get_declination &rArr; get_lookup_value &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lookup_value
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPS_Home
</UL>

<P><STRONG><a name="[269]"></a>get_lookup_value</STRONG> (Thumb, 324 bytes, Stack size 56 bytes, earth_declination.o(i.get_lookup_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = get_lookup_value &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pgm_read_byte_far
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_declination
</UL>

<P><STRONG><a name="[1b7]"></a>i2c0Read</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, myiic.o(i.i2c0Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c0Read
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterSlaveAddrSet
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataPut
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataGet
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterControl
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Single_ReadI2C0
</UL>

<P><STRONG><a name="[1b9]"></a>i2c0Write</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, myiic.o(i.i2c0Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = i2c0Write &rArr; i2c0WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Single_WriteI2C0
</UL>

<P><STRONG><a name="[270]"></a>i2c0WriteData</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, myiic.o(i.i2c0WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i2c0WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterSlaveAddrSet
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataPut
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterControl
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0Write
</UL>

<P><STRONG><a name="[ae]"></a>i2cRead</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, myiic.o(i.i2cRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2cRead
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterSlaveAddrSet
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataPut
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataGet
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterControl
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Double_ReadI2C
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Single_ReadI2C
</UL>

<P><STRONG><a name="[12c]"></a>i2cReadData</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, myiic.o(i.i2cReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2cReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterSlaveAddrSet
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataPut
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataGet
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterControl
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Read_Data
</UL>

<P><STRONG><a name="[12b]"></a>i2cWrite</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, myiic.o(i.i2cWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = i2cWrite &rArr; i2cWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Single_WriteI2C
</UL>

<P><STRONG><a name="[271]"></a>i2cWriteData</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, myiic.o(i.i2cWriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2cWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterSlaveAddrSet
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataPut
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterControl
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite
</UL>

<P><STRONG><a name="[f0]"></a>imuComputeRotationMatrix</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, sensor.o(i.imuComputeRotationMatrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = imuComputeRotationMatrix &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_Feedback
</UL>

<P><STRONG><a name="[1c1]"></a>initTime</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, time.o(i.initTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = initTime &rArr; SysTickIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodSet
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodGet
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntRegister
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntEnable
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Start_Init
</UL>

<P><STRONG><a name="[c9]"></a>invSqrt</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, sensor.o(i.invSqrt))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init_Again
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Observation_Angle_Calculate
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick_AHRS_Update_IMU
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init
</UL>

<P><STRONG><a name="[123]"></a>key_delay</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, key.o(i.key_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = key_delay &rArr; delay_us &rArr; delayMicroseconds &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
</UL>

<P><STRONG><a name="[262]"></a>land_althold</STRONG> (Thumb, 682 bytes, Stack size 24 bytes, control_land.o(i.land_althold))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = land_althold &rArr; PID_Control &rArr; Test_Period &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thr_Scale_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_altland
</UL>

<P><STRONG><a name="[277]"></a>land_nogps_run</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, control_land.o(i.land_nogps_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = land_nogps_run &rArr; Flight_Alt_Hold_Control &rArr; PID_Control_Div_LPF &rArr; Control_Device_LPF
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Take_Off_Reset
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_Alt_Hold_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;land_run
</UL>

<P><STRONG><a name="[ab]"></a>land_reset</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, control_land.o(i.land_reset))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controler_Mode_Select
</UL>

<P><STRONG><a name="[134]"></a>land_run</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, control_land.o(i.land_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = land_run &rArr; land_nogps_run &rArr; Flight_Alt_Hold_Control &rArr; PID_Control_Div_LPF &rArr; Control_Device_LPF
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;land_nogps_run
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Leading_Control
</UL>

<P><STRONG><a name="[9f]"></a>landon_earth_check</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, control_land.o(i.landon_earth_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = landon_earth_check &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Output
</UL>

<P><STRONG><a name="[e1]"></a>location_diff</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, sins.o(i.location_diff))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = location_diff &rArr; longitude_scale &rArr; __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longitude_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPSData_Sort
</UL>

<P><STRONG><a name="[278]"></a>longitude_scale</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, sins.o(i.longitude_scale))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = longitude_scale &rArr; __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_diff
</UL>

<P><STRONG><a name="[21]"></a>main</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = main &rArr; QuadShow &rArr; ConfigureUART7 &rArr; VL53L1Init &rArr; VL53L1_StartMeasurement &rArr; VL53L1_init_and_start_range &rArr; VL53L1_WriteMulti &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Or_Reset_PID_Parameter
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Calibration_Check
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Calibartion_LS
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWave_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Battery_Voltage
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Calibartion
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[f3]"></a>micros</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, time.o(i.micros))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = micros
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickValueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFIntHandler
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Period
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Systime
</UL>

<P><STRONG><a name="[181]"></a>millis</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, time.o(i.millis))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = millis &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Button_State_One
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADC_Button_State_One
</UL>

<P><STRONG><a name="[150]"></a>move_with_xy_target</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, namelesscotrun_sdk.o(i.move_with_xy_target))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = move_with_xy_target &rArr; OpticalFlow_Control_Pure &rArr; OpticalFlow_Vel_Control &rArr; accel_to_lean_angles &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pythagorous2
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Vel_Control
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Pos_Control
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control_Pure
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ncq_control_althold
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCQ_SDK_Run
</UL>

<P><STRONG><a name="[14f]"></a>move_with_z_target</STRONG> (Thumb, 580 bytes, Stack size 48 bytes, namelesscotrun_sdk.o(i.move_with_z_target))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = move_with_z_target &rArr; OpticalFlow_Control_Pure &rArr; OpticalFlow_Vel_Control &rArr; accel_to_lean_angles &rArr; constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Period
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_altland
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control_Pure
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ncq_control_althold
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCQ_SDK_Run
</UL>

<P><STRONG><a name="[151]"></a>ncq_control_althold</STRONG> (Thumb, 500 bytes, Stack size 8 bytes, control_althold.o(i.ncq_control_althold))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ncq_control_althold &rArr; PID_Control &rArr; Test_Period &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Control
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Systime
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thr_Scale_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_with_z_target
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_with_xy_target
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCQ_SDK_Run
</UL>

<P><STRONG><a name="[15c]"></a>pythagorous2</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, wp_math.o(i.pythagorous2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pythagorous2 &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sq
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Control
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_with_xy_target
</UL>

<P><STRONG><a name="[1a4]"></a>pythagorous3</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, wp_math.o(i.pythagorous3))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pythagorous3 &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sq
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Update
</UL>

<P><STRONG><a name="[10b]"></a>safe_sqrt</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wp_math.o(i.safe_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = safe_sqrt &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_Calibration_Check
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick_AHRS_Update_IMU
</UL>

<P><STRONG><a name="[27a]"></a>spl0601_get_calib_param</STRONG> (Thumb, 476 bytes, Stack size 16 bytes, spl06.o(i.spl0601_get_calib_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = spl0601_get_calib_param &rArr; spl0601_read &rArr; Single_ReadI2C &rArr; i2cRead
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_read
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_init
</UL>

<P><STRONG><a name="[288]"></a>spl0601_get_pressure</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, spl06.o(i.spl0601_get_pressure))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_spl0601_get
</UL>

<P><STRONG><a name="[27c]"></a>spl0601_get_raw_pressure</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, spl06.o(i.spl0601_get_raw_pressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spl0601_get_raw_pressure &rArr; spl0601_read &rArr; Single_ReadI2C &rArr; i2cRead
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_read
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_spl0601_get
</UL>

<P><STRONG><a name="[27d]"></a>spl0601_get_raw_temp</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, spl06.o(i.spl0601_get_raw_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spl0601_get_raw_temp &rArr; spl0601_read &rArr; Single_ReadI2C &rArr; i2cRead
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_read
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_spl0601_get
</UL>

<P><STRONG><a name="[27e]"></a>spl0601_get_temperature</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, spl06.o(i.spl0601_get_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = spl0601_get_temperature &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_spl0601_get
</UL>

<P><STRONG><a name="[249]"></a>spl0601_init</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, spl06.o(i.spl0601_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = spl0601_init &rArr; spl0601_get_calib_param &rArr; spl0601_read &rArr; Single_ReadI2C &rArr; i2cRead
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_read
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_calib_param
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WP_Init
</UL>

<P><STRONG><a name="[194]"></a>spl0601_rateset</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, spl06.o(i.spl0601_rateset))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = spl0601_rateset &rArr; spl0601_write &rArr; Single_WriteI2C &rArr; i2cWrite &rArr; i2cWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_write
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_read
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPL06_Init
</UL>

<P><STRONG><a name="[27b]"></a>spl0601_read</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, spl06.o(i.spl0601_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spl0601_read &rArr; Single_ReadI2C &rArr; i2cRead
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Single_ReadI2C
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_rateset
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_init
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_raw_temp
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_raw_pressure
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_calib_param
</UL>

<P><STRONG><a name="[195]"></a>spl0601_start_continuous</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spl06.o(i.spl0601_start_continuous))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = spl0601_start_continuous &rArr; spl0601_write &rArr; Single_WriteI2C &rArr; i2cWrite &rArr; i2cWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_write
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPL06_Init
</UL>

<P><STRONG><a name="[27f]"></a>spl0601_write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, spl06.o(i.spl0601_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = spl0601_write &rArr; Single_WriteI2C &rArr; i2cWrite &rArr; i2cWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Single_WriteI2C
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_start_continuous
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_rateset
</UL>

<P><STRONG><a name="[12d]"></a>sq</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wp_math.o(i.sq))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pythagorous2
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pythagorous3
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick_AHRS_Update_IMU
</UL>

<P><STRONG><a name="[251]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[153]"></a>ssd1306_begin</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, ssd1306.o(i.ssd1306_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ssd1306_begin &rArr; ssd1306_command &rArr; LCD_WrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_command
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init_Fast
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[16f]"></a>ssd1306_clear_display</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssd1306.o(i.ssd1306_clear_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ssd1306_clear_display
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ins_wave
</UL>

<P><STRONG><a name="[280]"></a>ssd1306_command</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ssd1306.o(i.ssd1306_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ssd1306_command &rArr; LCD_WrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_begin
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_display
</UL>

<P><STRONG><a name="[173]"></a>ssd1306_display</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ssd1306.o(i.ssd1306_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ssd1306_display &rArr; draw_oled &rArr; LCD_Set_Pos &rArr; LCD_WrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_command
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_oled
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ins_wave
</UL>

<P><STRONG><a name="[172]"></a>ssd1306_draw_circle</STRONG> (Thumb, 260 bytes, Stack size 52 bytes, ssd1306.o(i.ssd1306_draw_circle))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ssd1306_draw_circle &rArr; ssd1306_draw_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
</UL>

<P><STRONG><a name="[283]"></a>ssd1306_draw_fast_hline_internal</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, ssd1306.o(i.ssd1306_draw_fast_hline_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ssd1306_draw_fast_hline_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_fast_vline
</UL>

<P><STRONG><a name="[282]"></a>ssd1306_draw_fast_vline</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, ssd1306.o(i.ssd1306_draw_fast_vline))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ssd1306_draw_fast_vline &rArr; ssd1306_draw_fast_vline_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_fast_vline_internal
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_fast_hline_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_fill_circle
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_fill_circle_helper
</UL>

<P><STRONG><a name="[284]"></a>ssd1306_draw_fast_vline_internal</STRONG> (Thumb, 378 bytes, Stack size 28 bytes, ssd1306.o(i.ssd1306_draw_fast_vline_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ssd1306_draw_fast_vline_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_fast_vline
</UL>

<P><STRONG><a name="[170]"></a>ssd1306_draw_line</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, ssd1306.o(i.ssd1306_draw_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ssd1306_draw_line &rArr; ssd1306_draw_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
</UL>

<P><STRONG><a name="[266]"></a>ssd1306_draw_pixel</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, ssd1306.o(i.ssd1306_draw_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssd1306_draw_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_width
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_height
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_line
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_circle
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ins_wave
</UL>

<P><STRONG><a name="[171]"></a>ssd1306_fill_circle</STRONG> (Thumb, 48 bytes, Stack size 28 bytes, ssd1306.o(i.ssd1306_fill_circle))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ssd1306_fill_circle &rArr; ssd1306_fill_circle_helper &rArr; ssd1306_draw_fast_vline &rArr; ssd1306_draw_fast_vline_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_fill_circle_helper
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_fast_vline
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
</UL>

<P><STRONG><a name="[287]"></a>ssd1306_fill_circle_helper</STRONG> (Thumb, 198 bytes, Stack size 44 bytes, ssd1306.o(i.ssd1306_fill_circle_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ssd1306_fill_circle_helper &rArr; ssd1306_draw_fast_vline &rArr; ssd1306_draw_fast_vline_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_fast_vline
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_fill_circle
</UL>

<P><STRONG><a name="[286]"></a>ssd1306_height</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssd1306.o(i.ssd1306_height))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_pixel
</UL>

<P><STRONG><a name="[285]"></a>ssd1306_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssd1306.o(i.ssd1306_width))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_pixel
</UL>

<P><STRONG><a name="[197]"></a>user_spl0601_get</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, spl06.o(i.user_spl0601_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = user_spl0601_get &rArr; spl0601_get_temperature &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_temperature
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_raw_temp
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_raw_pressure
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_pressure
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPL06_Read_Data
</UL>

<P><STRONG><a name="[c6]"></a>write_6_8_number</STRONG> (Thumb, 696 bytes, Stack size 48 bytes, oled.o(i.write_6_8_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = write_6_8_number &rArr; LCD_P6x8Str &rArr; LCD_Set_Pos &rArr; LCD_WrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P6x8Char
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P6x8Str
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_6_8_number
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_HardWave_Init
</UL>

<P><STRONG><a name="[120]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter_Horizontal_GPS
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[2d3]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[2d4]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[2d5]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[2d6]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[2d7]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[cc]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LS_Calculate
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init_Again
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Battery_Voltage
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Read_Data
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_Feedback
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_temperature
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter_Horizontal_GPS
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Data_Prase_Process
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1X_Get_Distance
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openmv_Data_Receive_Anl_2
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuComputeRotationMatrix
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Observation_Angle_Calculate
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick_AHRS_Update_IMU
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init
</UL>

<P><STRONG><a name="[289]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[d1]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init_Again
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Battery_Voltage
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Read_Data
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_temperature
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter_Horizontal_GPS
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>

<P><STRONG><a name="[28c]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[293]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Battery_Voltage
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter_Horizontal_GPS
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1X_Get_Distance
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openmv_Data_Receive_Anl_2
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>

<P><STRONG><a name="[28f]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_PVT_Parse
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[290]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_Calibration
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Output
</UL>

<P><STRONG><a name="[291]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_PVT_Parse
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_temperature
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Data_Prase_Process
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1X_Get_Distance
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Output
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[2d8]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[bc]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_Calibration
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Battery_Voltage
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openmv_Data_Receive_Anl_2
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;landon_earth_check
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[2d9]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[2da]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[292]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[296]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init_Again
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_Calibration
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Battery_Voltage
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_PVT_Parse
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_Feedback
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_temperature
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter_Horizontal_GPS
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Data_Prase_Process
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openmv_Data_Receive_Anl_2
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Output
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Observation_Angle_Calculate
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[294]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[28b]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[28e]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[18a]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;landon_earth_check
</UL>

<P><STRONG><a name="[295]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[250]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[297]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[25f]"></a>_dsqrt</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, dsqrt_umaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init_Again
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuadShow
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_PVT_Parse
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter_Horizontal_GPS
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openmv_Data_Receive_Anl_2
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[299]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LS_Calculate
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init_Again
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Read_Data
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_PVT_Parse
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Status_Feedback
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_temperature
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter_Horizontal_GPS
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Openmv_Data_Receive_Anl_2
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuComputeRotationMatrix
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Observation_Angle_Calculate
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick_AHRS_Update_IMU
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euler_Angle_Init
</UL>

<P><STRONG><a name="[29a]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[29b]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[1b]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[2db]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[2dc]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[28a]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3a]"></a>_ADCIntNumberGet</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, adc.o(i._ADCIntNumberGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ADCIntNumberGet
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntRegister
</UL>

<P><STRONG><a name="[b7]"></a>_EEPROMSectorMaskClear</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, eeprom.o(i._EEPROMSectorMaskClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _EEPROMSectorMaskClear
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMMassErase
</UL>

<P><STRONG><a name="[b9]"></a>_EEPROMSectorMaskSet</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, eeprom.o(i._EEPROMSectorMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _EEPROMSectorMaskSet
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
</UL>

<P><STRONG><a name="[b4]"></a>_EEPROMWaitForDone</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, eeprom.o(i._EEPROMWaitForDone))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMMassErase
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMInit
</UL>

<P><STRONG><a name="[d9]"></a>_GPIOIntNumberGet</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, gpio.o(i._GPIOIntNumberGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _GPIOIntNumberGet
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntRegister
</UL>

<P><STRONG><a name="[1c6]"></a>_TimerIntNumberGet</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, timer.o(i._TimerIntNumberGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _TimerIntNumberGet
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntRegister
</UL>

<P><STRONG><a name="[1cd]"></a>_UARTIntNumberGet</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, uart.o(i._UARTIntNumberGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _UARTIntNumberGet
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntRegister
</UL>

<P><STRONG><a name="[9]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[10c]"></a>__ARM_isnanf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, calibration.o(i.__ARM_isnanf))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Calibration_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Other_Parameter_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horizontal_Calibration_Init
</UL>

<P><STRONG><a name="[127]"></a>__ARM_isnanf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, filter.o(i.__ARM_isnanf))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPButterworth
</UL>

<P><STRONG><a name="[111]"></a>__ARM_isnanf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mpu6050.o(i.__ARM_isnanf))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Calibration
</UL>

<P><STRONG><a name="[87]"></a>SensorConfig_UartSend</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, opticalflow_lc306.o(i.SensorConfig_UartSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SensorConfig_UartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Init_Uart
</UL>

<P><STRONG><a name="[9d]"></a>__ARM_isnanf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pid.o(i.__ARM_isnanf))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Paramter_Init_With_Flash
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Device_LPF
</UL>

<P><STRONG><a name="[11e]"></a>__ARM_isnanf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sins.o(i.__ARM_isnanf))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strapdown_INS_High_Kalman
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter_Horizontal
</UL>

<P><STRONG><a name="[15]"></a>SycTickHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, time.o(i.SycTickHandler))
<BR>[Address Reference Count : 1]<UL><LI> time.o(i.initTime)
</UL>
<P><STRONG><a name="[263]"></a>__ARM_isnanf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wp_math.o(i.__ARM_isnanf))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
</UL>

<P><STRONG><a name="[14c]"></a>NCLink_Send_Check</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, nclink.o(i.NCLink_Send_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NCLink_Send_Check &rArr; Serial_Data_Send &rArr; USART1_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Data_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NCLink_Send_Check_Status_Parameter
</UL>

<P><STRONG><a name="[26a]"></a>pgm_read_byte_far</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, earth_declination.o(i.pgm_read_byte_far))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lookup_value
</UL>

<P><STRONG><a name="[192]"></a>__ARM_isnanf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, namelesscotrun_sdk.o(i.__ARM_isnanf))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_Init
</UL>

<P><STRONG><a name="[73]"></a>ChangePresetMode</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, vl53l1_api.o(i.ChangePresetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ChangePresetMode &rArr; VL53L1_init_and_start_range &rArr; VL53L1_WriteMulti &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL53L1_SDA_OUT &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitUs
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_stop_range
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_user_zone
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_timeouts_us
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_user_zone
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_timeouts_us
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPresetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ClearInterruptAndStartMeasurement
</UL>

<P><STRONG><a name="[1a9]"></a>ComputeDevicePresetMode</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, vl53l1_api.o(i.ComputeDevicePresetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ComputeDevicePresetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPresetMode
</UL>

<P><STRONG><a name="[1ad]"></a>ComputeRQL</STRONG> (Thumb, 152 bytes, Stack size 36 bytes, vl53l1_api.o(i.ComputeRQL))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ComputeRQL
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSimpleData
</UL>

<P><STRONG><a name="[1ae]"></a>ConvertStatusLite</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, vl53l1_api.o(i.ConvertStatusLite))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSimpleData
</UL>

<P><STRONG><a name="[1a6]"></a>SetLimitValue</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, vl53l1_api.o(i.SetLimitValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetLimitValue &rArr; VL53L1_set_lite_sigma_threshold
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_lite_sigma_threshold
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_lite_min_count_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetLimitCheckValue
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetLimitCheckEnable
</UL>

<P><STRONG><a name="[78]"></a>SetPresetMode</STRONG> (Thumb, 114 bytes, Stack size 64 bytes, vl53l1_api.o(i.SetPresetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = SetPresetMode &rArr; VL53L1_set_preset_mode &rArr; VL53L1_preset_mode_low_power_auto_short_ranging &rArr; VL53L1_preset_mode_timed_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_preset_mode_timing_cfg
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeDevicePresetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetDistanceMode
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetPresetMode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePresetMode
</UL>

<P><STRONG><a name="[1ac]"></a>SetSimpleData</STRONG> (Thumb, 336 bytes, Stack size 72 bytes, vl53l1_api.o(i.SetSimpleData))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SetSimpleData &rArr; VL53L1_GetLimitCheckValue &rArr; VL53L1_get_lite_sigma_threshold
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetLimitCheckValue
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetLimitCheckEnable
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertStatusLite
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeRQL
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetRangingMeasurementData
</UL>

<P><STRONG><a name="[298]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[28d]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
